[
  {
    "id": "E1",
    "en": {
      "title": "Algebras in Programming",
      "detail": "Tuples, case classes and sealed traits are common data structures in Scala. Sometimes called products and co-products, they define algebraic data types. They are called ADTs in abbreviation. But where is the algebra in them?\nThe correspondence of data structures that we use every day in Scala with “regular” is not obvious at first sight.\nAlso, the term algebra is used in different concepts, like free monads, tagless final interpreters and recursion schemes. After watching this talk the use of this ambiguous term will be clarified.\nNo previous scala knowledge required. ",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "Functional Programming",
        "Algebra ",
        "ADT"
      ],
      "speakers": [
        {
          "name": "Harry Laoulakos",
          "icon": "/img/speakers/E1.jpg",
          "organization": "Talos Software",
          "speaker_experience": [
            "\"Shapeless 101\"",
            "- https://scala.io/2016/speakers.html#/b3e01a349f1eb483384fcb27102073b9aa62861e",
            "- https://harrylaou.com/slides/shapeless101.pdf",
            "- No Video available ",
            "",
            "-\"Monad Stacks or: How I Learned to Stop Worrying and Love the Free Monad\"",
            "- I gave this talk in TypeLevel Summit, and  and have been asked to give it in more conferences ",
            "- Code : https://gitlab.com/harrylaou/monad-stacks",
            "- Slides : https://harrylaou.com/slides/MonadStacks.pdf",
            "- video: https://www.youtube.com/watch?v=2TDDDFGa8-0",
            ""
          ],
          "contributes": [],
          "github": "harrylaou",
          "twitter": "harrylaou",
          "other_sns": "https://www.linkedin.com/in/harrylaou/"
        }
      ]
    },
    "ja": {
      "title": "プログラミングにおける代数",
      "detail": "タプル、case class、sealed trait などは Scala でよく使われるデータ構造です。これらはしばしば積や余積とも呼ばれ、代数的データ型 (ADT) を定義します。しかし、どこに「代数」が隠れているのでしょうか？\n私達が普段 Scala 使っているデータ構造と「正規」との対応はパッと見では明らかではありません。「代数」という用語は Free モナド、tagless final インタプリタや再帰スキームなどの異なるコンセプトで出てきます。\n\nこのトークでは、この曖昧な用語の使い方を解説します。Scala の予備知識は必要としません。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "Functional Programming",
        "Algebra ",
        "ADT"
      ],
      "speakers": [
        {
          "name": "Harry Laoulakos",
          "icon": "/img/speakers/E1.jpg",
          "organization": "Talos Software",
          "speaker_experience": [
            "\"Shapeless 101\"",
            "- https://scala.io/2016/speakers.html#/b3e01a349f1eb483384fcb27102073b9aa62861e",
            "- https://harrylaou.com/slides/shapeless101.pdf",
            "- No Video available ",
            "",
            "-\"Monad Stacks or: How I Learned to Stop Worrying and Love the Free Monad\"",
            "- I gave this talk in TypeLevel Summit, and  and have been asked to give it in more conferences ",
            "- Code : https://gitlab.com/harrylaou/monad-stacks",
            "- Slides : https://harrylaou.com/slides/MonadStacks.pdf",
            "- video: https://www.youtube.com/watch?v=2TDDDFGa8-0",
            ""
          ],
          "contributes": [],
          "github": "harrylaou",
          "twitter": "harrylaou",
          "other_sns": "https://www.linkedin.com/in/harrylaou/"
        }
      ]
    }
  },
  {
    "id": "E2",
    "en": {
      "title": "DOT for kiddies",
      "detail": "DOT is the essence of Scala. It testifies that Scala is not a random set of features but a system. I’ll explain DOT to those without a background in the theory of PLs. Starting with an idea of a theory for PL, I’ll present DOT, show examples and explain what is proved about it. I’ll also link DOT to dotty.",
      "language": "English",
      "length": 100,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        "theory",
        "dependent objects",
        "foundations"
      ],
      "speakers": [
        {
          "name": "Vitaly Bragilevsky",
          "icon": "https://avatars2.githubusercontent.com/u/298521?s=400&u=f2bf3cc53dfd445bcdefae3a39ebbfa7a2b72c55&v=4",
          "organization": "Lecturer at JetBrains",
          "speaker_experience": [
            "All my talks are available at https://www.youtube.com/user/bravit111, including:",
            "1) LambdaConf 2018 (set of lectures, slides& other materials: https://github.com/bravit/tt-ghc-exercises, video: https://www.youtube.com/playlist?list=PLvPsfYrGz3wspkm6LVEjndvQqK6SkcXaT)",
            "2) F(By) 2019 (https://www.youtube.com/watch?v=8YGtMrQ5keA)",
            "3) BOBKonf 2019 (Berlin, https://github.com/bravit/bob19-tutorial-types, no video recording)",
            ""
          ],
          "contributes": [
            "I contributed to the Glasgow Haskell Compiler (I'm the member of GHC Steering Committee)"
          ],
          "github": "bravit",
          "twitter": "VBragilevsky",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "こどものためのDOT",
      "detail": "DOTはScalaの本質です。Scalaが無作為な機能セットなどではなく、システムであることを証明してくれます。\nこのセッションではDOTについて、プログラミング言語の理論的背景に馴染みがない人に向けて説明します。プログラミング言語の理論のアイディアからはじめて、DOTを解説し、例示しながらDOTでは何が保証されてるのか解説します。そしてDottyの説明へと繋げます。",
      "language": "English",
      "length": 100,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        "theory",
        "dependent objects",
        "foundations"
      ],
      "speakers": [
        {
          "name": "Vitaly Bragilevsky",
          "icon": "https://avatars2.githubusercontent.com/u/298521?s=400&u=f2bf3cc53dfd445bcdefae3a39ebbfa7a2b72c55&v=4",
          "organization": "Lecturer at JetBrains",
          "speaker_experience": [
            "All my talks are available at https://www.youtube.com/user/bravit111, including:",
            "1) LambdaConf 2018 (set of lectures, slides& other materials: https://github.com/bravit/tt-ghc-exercises, video: https://www.youtube.com/playlist?list=PLvPsfYrGz3wspkm6LVEjndvQqK6SkcXaT)",
            "2) F(By) 2019 (https://www.youtube.com/watch?v=8YGtMrQ5keA)",
            "3) BOBKonf 2019 (Berlin, https://github.com/bravit/bob19-tutorial-types, no video recording)",
            ""
          ],
          "contributes": [
            "I contributed to the Glasgow Haskell Compiler (I'm the member of GHC Steering Committee)"
          ],
          "github": "bravit",
          "twitter": "VBragilevsky",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E3",
    "en": {
      "title": "Those anti-patterns you’ll never see: how Akka 2.6 changes the way of building maintainable distributed systems",
      "detail": "Akka has been used for over a decade to build mission-critical systems, yet the Classic API also has its set of shortcomings. With the release of Akka 2.6, the majority of these anti-patterns have now been rendered impossible by design. This talk shows how to make best use of the new release.",
      "language": "English",
      "length": 40,
      "tags": [
        "Best Practices",
        " Software Design and Architecture",
        " Microservices"
      ],
      "keywords": [
        "Akka Typed",
        "Distributed Systems",
        "Best practice"
      ],
      "speakers": [
        {
          "name": "Manuel Bernhardt",
          "icon": "https://en.gravatar.com/userimage/18124135/34183f2109d6ec0eb54d349c10a4d2dc.png",
          "organization": "manuel.bernhardt.io, Reactive & Distributed Systems Consultant",
          "speaker_experience": [
            "A full list of the talks I have given including links to recordings and slides is available here: https://manuel.bernhardt.io/talks/"
          ],
          "contributes": [
            "- https://github.com/manuelbernhardt/akka-locality",
            "- https://github.com/lightbend/Pi-Akka-Cluster"
          ],
          "github": "manuelbernhardt",
          "twitter": "elmanu",
          "other_sns": "https://www.linkedin.com/in/manuelbernhardt/"
        }
      ]
    },
    "ja": {
      "title": "消えたアンチパターン：Akka 2.6はメンテナンス性がある分散システムの構築方法をどのように変えたか",
      "detail": "Akkaはミッションクリティカルシステムの構築に10年以上利用されてきましたが、そのクラシックAPIには欠点もあります。Akka 2.6リリースで、設計によりこれらのアンチパターンが今や作られないようになりました。このトークではAkkaの新しいリリースの最善な利用方法について紹介します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Best Practices",
        " Software Design and Architecture",
        " Microservices"
      ],
      "keywords": [
        "Akka Typed",
        "Distributed Systems",
        "Best practice"
      ],
      "speakers": [
        {
          "name": "Manuel Bernhardt",
          "icon": "https://en.gravatar.com/userimage/18124135/34183f2109d6ec0eb54d349c10a4d2dc.png",
          "organization": "manuel.bernhardt.io, Reactive & Distributed Systems Consultant",
          "speaker_experience": [
            "A full list of the talks I have given including links to recordings and slides is available here: https://manuel.bernhardt.io/talks/"
          ],
          "contributes": [
            "- https://github.com/manuelbernhardt/akka-locality",
            "- https://github.com/lightbend/Pi-Akka-Cluster"
          ],
          "github": "manuelbernhardt",
          "twitter": "elmanu",
          "other_sns": "https://www.linkedin.com/in/manuelbernhardt/"
        }
      ]
    }
  },
  {
    "id": "E5",
    "en": {
      "title": "3 Approaches for Differential Programming in Scala 3",
      "detail": "This talk will introduce and motivate automatic differentiation, and will describe some different approaches to AD in Scala 3 – including dual numbers (forward AD), type-oriented symbolic differentiation, and reverse AD with TASTy reflection.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Data Science / Machine Learning"
      ],
      "keywords": [
        "differentiable programming",
        "machine learning",
        "dotty"
      ],
      "speakers": [
        {
          "name": "Jeremy Smith",
          "icon": "/img/speakers/E5.jpg",
          "organization": "Senior Software Engineer at Netflix",
          "speaker_experience": [
            "Scala eXchange 2018 – no video, but slides are here: https://jeremyrsmith.github.io/scalax-workshop/",
            "ScalaDays 2019 – Video is here: https://www.youtube.com/watch?v=BfaBeT0pRe0 and slides are here: https://jeremyrsmith.github.io/baudrillard/slides/",
            "Scale by the Bay 2019 – Video is here: https://www.youtube.com/watch?v=QplRowWRNuQ (slides aren't yet posted)"
          ],
          "contributes": [
            "Creator of Polynote – github.com/polynote/polynote",
            "Creator of circe-yaml – github.com/circe/circe-yaml",
            "Occasional contributor to shapeless",
            ""
          ],
          "github": "jeremyrsmith",
          "twitter": "jeremyrsmith",
          "other_sns": "LinkedIn – gentleman-and-a-scala"
        }
      ]
    },
    "ja": {
      "title": "Scala 3、微分可能プログラミングの3つのアプローチ",
      "detail": "このトークでは、自動微分とその動機の紹介をしたあと、Scala 3で自動微分を実現するための3つの異なるアプローチ - 二重数 (フォワードモード自動微分)、型指向数式微分、TASTyリフレクションによるリバースモード自動微分- について見ていきます。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Data Science / Machine Learning"
      ],
      "keywords": [
        "differentiable programming",
        "machine learning",
        "dotty"
      ],
      "speakers": [
        {
          "name": "Jeremy Smith",
          "icon": "/img/speakers/E5.jpg",
          "organization": "Senior Software Engineer at Netflix",
          "speaker_experience": [
            "Scala eXchange 2018 – no video, but slides are here: https://jeremyrsmith.github.io/scalax-workshop/",
            "ScalaDays 2019 – Video is here: https://www.youtube.com/watch?v=BfaBeT0pRe0 and slides are here: https://jeremyrsmith.github.io/baudrillard/slides/",
            "Scale by the Bay 2019 – Video is here: https://www.youtube.com/watch?v=QplRowWRNuQ (slides aren't yet posted)"
          ],
          "contributes": [
            "Creator of Polynote – github.com/polynote/polynote",
            "Creator of circe-yaml – github.com/circe/circe-yaml",
            "Occasional contributor to shapeless",
            ""
          ],
          "github": "jeremyrsmith",
          "twitter": "jeremyrsmith",
          "other_sns": "LinkedIn – gentleman-and-a-scala"
        }
      ]
    }
  },
  {
    "id": "E6",
    "en": {
      "title": "Ray Tracing with Environmental Effects",
      "detail": "In this talk I will introduce you to environmental effects as provided by ZIO. We will use them to build a fully working ray tracing application, discovering the basics of ray tracing and finding out how  environmental effects allow us to build functional, modular, fully testable applications. All this with full type inference and without the need of deep knowledge of the Scala type system.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "zio, architecture, ray-tracing"
      ],
      "speakers": [
        {
          "name": "Pierangelo Cecchetto",
          "icon": "/img/speakers/E6.jpg",
          "organization": "TulipLogic B.V.",
          "speaker_experience": [
            "I gave talks at local meetups in Amsterdam, and I gave a talk at BeeScala 2019. Video recording will be available soon (I can provide them as soon as available). For the slides see https://www.slideshare.net/PierangeloCecchetto/environmental-effects-a-ray-tracing-exercise-197041442"
          ],
          "contributes": [
            "I contribute mainly to zio projects. zio, zio-kafka, zio-macros"
          ],
          "github": "",
          "twitter": "pierangelocecc",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "ZIOの environmental effects を利用したレイトレーシング",
      "detail": "このトークでは、ZIO に導入された environmental effects を紹介します。レイトレーシング・アプリケーションを例に取って、レイトレーシングの基本や environmental effects が関数型、モジュラー、かつテスタブルなアプリケーションを構築するのにどう役立つのかを見ていきましょう。なおかつ、型推論は完全に動作し、Scala の型システムの深い知識も必要としません。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "zio, architecture, ray-tracing"
      ],
      "speakers": [
        {
          "name": "Pierangelo Cecchetto",
          "icon": "/img/speakers/E6.jpg",
          "organization": "TulipLogic B.V.",
          "speaker_experience": [
            "I gave talks at local meetups in Amsterdam, and I gave a talk at BeeScala 2019. Video recording will be available soon (I can provide them as soon as available). For the slides see https://www.slideshare.net/PierangeloCecchetto/environmental-effects-a-ray-tracing-exercise-197041442"
          ],
          "contributes": [
            "I contribute mainly to zio projects. zio, zio-kafka, zio-macros"
          ],
          "github": "",
          "twitter": "pierangelocecc",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E7",
    "en": {
      "title": "zio-config - Unveiling the much simplified advanced functional programming in Scala",
      "detail": "I will talk about my library zio-config (https://github.com/zio/zio-config)- that aims to have  a purely functional, yet a thin interface to access configuration information inside an application. The purpose of the talk is not only to demonstrate what zio-config is, but to demonstrate the fact that sticking on to fundamentals and finding the right structure enables writing purely functional libraries with zero complexity. zio-config is built on solid foundations of FP leveraging program introspection - that gels with Free Applicative style encoding, while staying insanely simple for anyone.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Tools",
        " Best Practices"
      ],
      "keywords": [
        "Free Applicative",
        "Program introspection",
        "Zero dependency"
      ],
      "speakers": [
        {
          "name": "Afsal Thaj",
          "icon": "https://avatars2.githubusercontent.com/u/7448613?s=460&v=4",
          "organization": "Principal Consultant, Simple Machines",
          "speaker_experience": [
            "Scalasyd, Australia",
            "Beescala, Slovenia",
            "Functional Scala, London (talk accepted)"
          ],
          "contributes": [
            "zio-configv(author, maintainer)",
            "safe-string-interpolation (author, maintainer)",
            "other contributions."
          ],
          "github": "afsalthaj",
          "twitter": "afsalt2",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "zio-config: 高度な関数型プログラミングのシンプル化",
      "detail": "このトークは、zio-config で何ができるかの実演を行うためだけではなく、関数型プログラミングの基本を守って、正しいデータ構造を選ぶことができれば一切の複雑さ無しで純粋関数型ライブラリを書くことが可能であることを実証することを目的としています。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Tools",
        " Best Practices"
      ],
      "keywords": [
        "Free Applicative",
        "Program introspection",
        "Zero dependency"
      ],
      "speakers": [
        {
          "name": "Afsal Thaj",
          "icon": "https://avatars2.githubusercontent.com/u/7448613?s=460&v=4",
          "organization": "Principal Consultant, Simple Machines",
          "speaker_experience": [
            "Scalasyd, Australia",
            "Beescala, Slovenia",
            "Functional Scala, London (talk accepted)"
          ],
          "contributes": [
            "zio-configv(author, maintainer)",
            "safe-string-interpolation (author, maintainer)",
            "other contributions."
          ],
          "github": "afsalthaj",
          "twitter": "afsalt2",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E8",
    "en": {
      "title": "Pure Functional Programming for Beginners",
      "detail": "What is pure functional programming? How can you use it to make your Scala programs easier to test, easier to reason about and more reusable?",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        "monoids",
        "pure functional programming"
      ],
      "speakers": [
        {
          "name": "Justin Heyes-Jones",
          "icon": "/img/speakers/E8.jpg",
          "organization": "Yoppworks",
          "speaker_experience": [
            "Scale by the Bay 2019: Gentle Introduction to Comonads https://youtu.be/kVnJtiN1dbk",
            "Vancouver Scala Meetup 2019: FUNCTORS TO COMONADS IN 30 MINUTES",
            " https://justinhj.github.io/comonad-reveal/",
            "Vancouver Functional Programming 2018: From IO to ZIO ",
            ""
          ],
          "contributes": [
            "Contributed to ZIO, Cats, Fetch, Tapir. Ammonite",
            "Developer, Maintainer of ",
            "https://github.com/justinhj/fp-starter-pack.g8",
            "https://github.com/justinhj/astar-algorithm-cpp",
            "https://github.com/justinhj/hnfetchjs",
            ""
          ],
          "github": "justinhj",
          "twitter": "@justinhj",
          "other_sns": "https://www.linkedin.com/in/justinheyesjones/"
        }
      ]
    },
    "ja": {
      "title": "初心者のための純粋関数型プログラミング",
      "detail": "純粋関数型プログラミングとは何でしょうか？\nそれがScalaコードのテストを容易にし、推論しやすくし、再利用性を高める\bのにどのように使われるのでしょうか？",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        "monoids",
        "pure functional programming"
      ],
      "speakers": [
        {
          "name": "Justin Heyes-Jones",
          "icon": "/img/speakers/E8.jpg",
          "organization": "Yoppworks",
          "speaker_experience": [
            "Scale by the Bay 2019: Gentle Introduction to Comonads https://youtu.be/kVnJtiN1dbk",
            "Vancouver Scala Meetup 2019: FUNCTORS TO COMONADS IN 30 MINUTES",
            " https://justinhj.github.io/comonad-reveal/",
            "Vancouver Functional Programming 2018: From IO to ZIO ",
            ""
          ],
          "contributes": [
            "Contributed to ZIO, Cats, Fetch, Tapir. Ammonite",
            "Developer, Maintainer of ",
            "https://github.com/justinhj/fp-starter-pack.g8",
            "https://github.com/justinhj/astar-algorithm-cpp",
            "https://github.com/justinhj/hnfetchjs",
            ""
          ],
          "github": "justinhj",
          "twitter": "@justinhj",
          "other_sns": "https://www.linkedin.com/in/justinheyesjones/"
        }
      ]
    }
  },
  {
    "id": "E9",
    "en": {
      "title": "Reactive Manifesto 6 years later",
      "detail": "It’s been a while since the Reactive Manifesto got widely announced and discussed. What changed since then? Was it a meaningful movement that shaped the direction of the evolution of software engineering? Or just another fancy set of buzzwords? This talk summarizes what “reactive” really means today and how the technological landscape looks like within the Scala ecosystem after it got stirred 6 years ago.",
      "language": "English",
      "length": 40,
      "tags": [
        "Best Practices",
        " Software Design and Architecture",
        " Microservices"
      ],
      "keywords": [
        "reactive",
        "architecture",
        "design"
      ],
      "speakers": [
        {
          "name": "Krzysztof Ciesielski",
          "icon": "https://pbs.twimg.com/profile_images/1151236555304054785/JJEQYIq__400x400.png",
          "organization": "SoftwareMill",
          "speaker_experience": [
            "Reactive Summit 2016, ",
            "Scala Matsuri 2017 https://www.youtube.com/watch?v=Ux83mZcEKTU&list=PL39pyF64-WFKe1KiOdAqurBfJo5upj3FJ&index=19,",
            "LambdAle 2018 https://www.youtube.com/watch?v=nSGSA2xAf2U"
          ],
          "contributes": [
            "Alpakka Kafka https://github.com/akka/alpakka-kafka",
            "scala-clippy https://github.com/softwaremill/scala-clippy",
            "sbt-softwaremill https://github.com/softwaremill/sbt-softwaremill"
          ],
          "github": "kciesielski",
          "twitter": "kpciesielski",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Reactive マニフェストから\b6年経った今",
      "detail": "Reactive マニフェストが広く知られ、議論されるようになってしばらくの時が経ちました。\nその間なにが変化したのでしょうか？その変化はソフトウェア\r・エンジニアリングの進化を方向づける意味のあるものだったのでしょうか。もしくは、耳目を集めるバズワードに過ぎなかったのでしょうか。このトークでは、『Reactive』が今日真に意味するもの、６年を経てScala のエコシステムの内でどんな技術的展望を見せるのかをまとめます。",
      "language": "English",
      "length": 40,
      "tags": [
        "Best Practices",
        " Software Design and Architecture",
        " Microservices"
      ],
      "keywords": [
        "reactive",
        "architecture",
        "design"
      ],
      "speakers": [
        {
          "name": "Krzysztof Ciesielski",
          "icon": "https://pbs.twimg.com/profile_images/1151236555304054785/JJEQYIq__400x400.png",
          "organization": "SoftwareMill",
          "speaker_experience": [
            "Reactive Summit 2016, ",
            "Scala Matsuri 2017 https://www.youtube.com/watch?v=Ux83mZcEKTU&list=PL39pyF64-WFKe1KiOdAqurBfJo5upj3FJ&index=19,",
            "LambdAle 2018 https://www.youtube.com/watch?v=nSGSA2xAf2U"
          ],
          "contributes": [
            "Alpakka Kafka https://github.com/akka/alpakka-kafka",
            "scala-clippy https://github.com/softwaremill/scala-clippy",
            "sbt-softwaremill https://github.com/softwaremill/sbt-softwaremill"
          ],
          "github": "kciesielski",
          "twitter": "kpciesielski",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E10",
    "en": {
      "title": "Help, my Akka Cluster is broken!",
      "detail": "While Akka Cluster is designed to be fault-tolerant, there will be times when your environment just isn't working as expected. This session will discuss our experiences of how to most effectively collect and understand Akka Cluster diagnostics. We'll talk through using these diagnostics to work out what's gone wrong, and how to recover from a system outage. Using this new-found knowledge, you will be equipped to handle any problem your cluster throws at you.",
      "language": "English",
      "length": 40,
      "tags": [
        "Tools",
        " Best Practices",
        " DevOps",
        " Microservices"
      ],
      "keywords": [
        "DevOps, Akka Cluster, Monitoring"
      ],
      "speakers": [
        {
          "name": "Hungai Kevin Amuhinda",
          "icon": "https://github.com/hungaikev.png",
          "organization": "",
          "speaker_experience": [
            "https://www.youtube.com/watch?v=lTJ0L92C-9k&t=1s  https://www.youtube.com/watch?v=HSgb7gOO1Ig&t=1s"
          ],
          "contributes": [],
          "github": "hungaikev",
          "twitter": "Hungai",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "助けて！ぼくのAkka クラスターがぶっ壊れたの",
      "detail": "Akka クラスターは耐障害性が高く設計されていますが、その一方であなたの環境で期待通り動かないということは多々あるでしょう。\nこのセッションでは、Akka クラスターの診断結果を収集し理解する最も効率的な方法を私達の経験に基づいてお話します。これらの診断結果を使って、不具合を解決し、システム障害からどうやって回復するかじっくり議論します。この新しい知識を携えて、あなたは自分のクラスターから飛んでくるどんな問題もうまく扱うことができるようになるでしょう。",
      "language": "English",
      "length": 40,
      "tags": [
        "Tools",
        " Best Practices",
        " DevOps",
        " Microservices"
      ],
      "keywords": [
        "DevOps, Akka Cluster, Monitoring"
      ],
      "speakers": [
        {
          "name": "Hungai Kevin Amuhinda",
          "icon": "https://github.com/hungaikev.png",
          "organization": "",
          "speaker_experience": [
            "https://www.youtube.com/watch?v=lTJ0L92C-9k&t=1s  https://www.youtube.com/watch?v=HSgb7gOO1Ig&t=1s"
          ],
          "contributes": [],
          "github": "hungaikev",
          "twitter": "Hungai",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E11",
    "en": {
      "title": "Streaming Apps and Poison Pills: Handle the Unexpected with Kafka Streams",
      "detail": "This Scala Live coding demonstrates how to deal with corrupted messages in a stream of events processed with Kafka Streams. Apache Kafka’s Streams API lets us process messages from different topics with very low latency. Messages may have different formats, schemas and may even be serialised in different ways. What happens when an undesirable message comes in the flow? When an error occurs, real-time applications can’t always wait for manual recovery and need to handle such failures. The presentation includes valuable experiences from building and running Kafka Streams projects in production.",
      "language": "English",
      "length": 40,
      "tags": [
        "Big Data / Fast Data",
        " Best Practices"
      ],
      "keywords": [
        "Kafka",
        "EventStreams",
        "LiveCoding"
      ],
      "speakers": [
        {
          "name": "Loic DIVAD",
          "icon": "https://avatars0.githubusercontent.com/u/7292538?s=460&v=4",
          "organization": "Publicis Sapient Engineering",
          "speaker_experience": [
            "This presentation has been played at Kafka Summit San Francisco 2019: https://www.confluent.io/kafka-summit-san-francisco-2019/streaming-apps-and-poison-pills-handle-the-unexpected-with-kafka-streams.",
            "",
            "I'm also have 3 years of experience as technical speaker: https://speakerdeck.com/loicdivad"
          ],
          "contributes": [],
          "github": "DivLoic",
          "twitter": "LoicMDivad",
          "other_sns": "https://www.linkedin.com/in/lo%C3%AFc-divad-3a5a9893/"
        }
      ]
    },
    "ja": {
      "title": " ストリーミングアプリとポイズン・ピル: Kafka ストリームで不測の事態をうまく処理するには",
      "detail": "このライブコーディングでは、Kafka Streams で処理するイベント・ストリームの中で破損したメッセージをどう処理するか実演します。\nApache Kafka の Streams API は、様々な topic からのメッセージを低レイテンシーで処理することができます。\t\nメッセージが様々なフォーマットや、スキーマであったり、異なる方法でシリアライズされていたとしてもです。\n望ましくないメッセージが流れてくるとなにが起きるでしょう？\nエラーが発生した時、リアルタイムなアプリでは、手作業での復旧をいつも待てるとは限らず、うまく処理する必要があります。\nプレゼンの中で、プロダクトの中で Kafka Streams プロジェクトを構築し運用して得られた価値ある経験を紹介します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Big Data / Fast Data",
        " Best Practices"
      ],
      "keywords": [
        "Kafka",
        "EventStreams",
        "LiveCoding"
      ],
      "speakers": [
        {
          "name": "Loic DIVAD",
          "icon": "https://avatars0.githubusercontent.com/u/7292538?s=460&v=4",
          "organization": "Publicis Sapient Engineering",
          "speaker_experience": [
            "This presentation has been played at Kafka Summit San Francisco 2019: https://www.confluent.io/kafka-summit-san-francisco-2019/streaming-apps-and-poison-pills-handle-the-unexpected-with-kafka-streams.",
            "",
            "I'm also have 3 years of experience as technical speaker: https://speakerdeck.com/loicdivad"
          ],
          "contributes": [],
          "github": "DivLoic",
          "twitter": "LoicMDivad",
          "other_sns": "https://www.linkedin.com/in/lo%C3%AFc-divad-3a5a9893/"
        }
      ]
    }
  },
  {
    "id": "E12",
    "en": {
      "title": "ZIO Actors",
      "detail": "Actors are one of the most popular concurrency models in nowadays software systems. In this talk, I will present zio-actors - a small, strongly typed actor library backed by ZIO. I will explain library design, demonstrate its usage and point out the differences and similarities with Akka.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Tools"
      ],
      "keywords": [
        "Actor Model",
        "ZIO",
        "Functional Programming"
      ],
      "speakers": [
        {
          "name": "Mateusz Sokół",
          "icon": "/img/speakers/E12.jpg",
          "organization": "Software Engineer at Scalac, Undergrad student at AGH - UST in Cracow",
          "speaker_experience": [
            "I gave a talk at FunctionalScala 2019 (London edition) which was my first talk.",
            "",
            "I'm listed as next to last speaker: https://www.functionalscala.com/",
            "",
            "The talk I would like to give would be pretty much the same but extended with new parts that we will deliver in the next months. The original talk was planned for 25 min presentation.",
            "",
            "A recording of my talk should be available soon, so you can evaluate whether it's suitable.",
            "",
            "Current slides are available here: https://slides.com/mtsokol/zio-actors"
          ],
          "contributes": [
            "For the last six months I've been involved in OSS contribution to ZIO ecosystem - a concurrent programming library for Scala.",
            "I've committed to ZIO, ZIO-NIO and ZIO-Actors where for ZIO-Actors I've done a library overhaul.",
            "",
            "I'm the author of Actor System and Actor Remoting for ZIO-Actors which I've done from scratch under John De Goes and other ZIO organization members supervision.",
            "",
            "Recently we've done first library release which was a big event on twitter:",
            "https://twitter.com/SalarRahmanian/status/1203780952595394560"
          ],
          "github": "mtsokol",
          "twitter": "mt_sokol",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "ZIO Actors",
      "detail": "アクターは今日のソフトウェアシステムにおいて最も人気のある並行処理のモデルの一つです。このトークでは zio-actors を紹介します。zio-actors は ZIO によって駆動される小さいながらも、強く型付けされたアクターのライブラリです。Akka との相違点や共通点を挙げながら、ライブラリの設計や使い方のデモについてもお話ししようと思っています。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Tools"
      ],
      "keywords": [
        "Actor Model",
        "ZIO",
        "Functional Programming"
      ],
      "speakers": [
        {
          "name": "Mateusz Sokół",
          "icon": "/img/speakers/E12.jpg",
          "organization": "Software Engineer at Scalac, Undergrad student at AGH - UST in Cracow",
          "speaker_experience": [
            "I gave a talk at FunctionalScala 2019 (London edition) which was my first talk.",
            "",
            "I'm listed as next to last speaker: https://www.functionalscala.com/",
            "",
            "The talk I would like to give would be pretty much the same but extended with new parts that we will deliver in the next months. The original talk was planned for 25 min presentation.",
            "",
            "A recording of my talk should be available soon, so you can evaluate whether it's suitable.",
            "",
            "Current slides are available here: https://slides.com/mtsokol/zio-actors"
          ],
          "contributes": [
            "For the last six months I've been involved in OSS contribution to ZIO ecosystem - a concurrent programming library for Scala.",
            "I've committed to ZIO, ZIO-NIO and ZIO-Actors where for ZIO-Actors I've done a library overhaul.",
            "",
            "I'm the author of Actor System and Actor Remoting for ZIO-Actors which I've done from scratch under John De Goes and other ZIO organization members supervision.",
            "",
            "Recently we've done first library release which was a big event on twitter:",
            "https://twitter.com/SalarRahmanian/status/1203780952595394560"
          ],
          "github": "mtsokol",
          "twitter": "mt_sokol",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E13",
    "en": {
      "title": "Sleeping well in the lion's den with Monix Catnap",
      "detail": "Concurrency bugs leave you restless? Monix Catnap provides a ton of utilities that will let your worries take a good nap!\n\nIf you’re curious how Local can help you with tracing, had to solve complex producer-consumer scenarios or you ever needed a high-performance Async Queue it’s a talk for you.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        "concurrency, fp, tracing"
      ],
      "speakers": [
        {
          "name": "Piotr Gawryś",
          "icon": "https://avatars3.githubusercontent.com/u/12383899?s=400&u=3f8d764e0dec2906239e2a846c45134ced27e2ec&v=4",
          "organization": "Software Engineer at VirtusLab",
          "speaker_experience": [
            "ScalaMatsuri 2019: https://www.youtube.com/watch?v=MeOs9SeO8-c",
            "flatMap(Oslo) 2019: https://www.youtube.com/watch?v=InctntW3CAA",
            "",
            "And the same talk on Scalar 2019"
          ],
          "contributes": [
            "Monix, Cats-Effect, Monix-BIO"
          ],
          "github": "Avasil",
          "twitter": "p_gawrys",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Monix Catnapで虎穴でも安眠",
      "detail": "並行性起因のバグが気になって夜に寝付けない？\nMonix Catnapには、悩みの種を解消する、たくさんのユーティリティを提供しています。\n\nLocalがトレーシングにどう役立つか関心があったり、複雑なプロデューサー・コンシューマーのシナリオを解決しなければいけなかったり、もしくはハイパフォーマンスな非同期キューがまさに必要だったりしたら、このトークはあなた向けです！",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        "concurrency, fp, tracing"
      ],
      "speakers": [
        {
          "name": "Piotr Gawryś",
          "icon": "https://avatars3.githubusercontent.com/u/12383899?s=400&u=3f8d764e0dec2906239e2a846c45134ced27e2ec&v=4",
          "organization": "Software Engineer at VirtusLab",
          "speaker_experience": [
            "ScalaMatsuri 2019: https://www.youtube.com/watch?v=MeOs9SeO8-c",
            "flatMap(Oslo) 2019: https://www.youtube.com/watch?v=InctntW3CAA",
            "",
            "And the same talk on Scalar 2019"
          ],
          "contributes": [
            "Monix, Cats-Effect, Monix-BIO"
          ],
          "github": "Avasil",
          "twitter": "p_gawrys",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E14",
    "en": {
      "title": "Understanding Monix Observable",
      "detail": "Monix Observable is a streaming data type which marries ReactiveX with purely functional programming in Scala.\n\nLet’s dive deep into its internals, explain how and why it works and what are some of the less pleasant consequences of its design.",
      "language": "English",
      "length": 100,
      "tags": [
        "Functional Programming",
        " Software Design and Architecture",
        " Others"
      ],
      "keywords": [
        "Concurrency",
        "Streaming",
        "Internals"
      ],
      "speakers": [
        {
          "name": "Piotr Gawryś",
          "icon": "https://avatars3.githubusercontent.com/u/12383899?s=400&u=3f8d764e0dec2906239e2a846c45134ced27e2ec&v=4",
          "organization": "Software Engineer at VirtusLab",
          "speaker_experience": [
            "ScalaMatsuri 2019: https://www.youtube.com/watch?v=MeOs9SeO8-c",
            "flatMap(Oslo) 2019: https://www.youtube.com/watch?v=InctntW3CAA",
            "",
            "And the same talk on Scalar 2019"
          ],
          "contributes": [
            "https://github.com/monix/monix",
            "https://github.com/monix/monix-bio",
            "https://github.com/typelevel/cats-effect"
          ],
          "github": "Avasil",
          "twitter": "p_gawrys",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Monix Observableを理解する",
      "detail": "Monix Observableは、Reactive Xと純粋関数型プログラミングがScalaの縁で結婚したかのような、ストリームのデータ型です。\n\n今回その中身を詳しく見ながら、どういうコードになっているのか、なぜうまく動くのか、そしてあまり見目麗しくない設計にならざるを得なかった場所について紹介していきます。",
      "language": "English",
      "length": 100,
      "tags": [
        "Functional Programming",
        " Software Design and Architecture",
        " Others"
      ],
      "keywords": [
        "Concurrency",
        "Streaming",
        "Internals"
      ],
      "speakers": [
        {
          "name": "Piotr Gawryś",
          "icon": "https://avatars3.githubusercontent.com/u/12383899?s=400&u=3f8d764e0dec2906239e2a846c45134ced27e2ec&v=4",
          "organization": "Software Engineer at VirtusLab",
          "speaker_experience": [
            "ScalaMatsuri 2019: https://www.youtube.com/watch?v=MeOs9SeO8-c",
            "flatMap(Oslo) 2019: https://www.youtube.com/watch?v=InctntW3CAA",
            "",
            "And the same talk on Scalar 2019"
          ],
          "contributes": [
            "https://github.com/monix/monix",
            "https://github.com/monix/monix-bio",
            "https://github.com/typelevel/cats-effect"
          ],
          "github": "Avasil",
          "twitter": "p_gawrys",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E15",
    "en": {
      "title": "Writing Kubernetes Operator with Cats-Effects",
      "detail": "Scala and Cats-Effects are perfect tools to implement functional backend application like Kubernetes(k8s) operator. In this talk we are going through K8s Operator implementation and introduction to a small, but helpful library in Scala using fabri8 k8s-client under the hood.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " DevOps",
        " Microservices"
      ],
      "keywords": [
        "functional-programming, kubernetes, cats-effect"
      ],
      "speakers": [
        {
          "name": "Alexey Novakov",
          "icon": "/img/speakers/E15.jpg",
          "organization": "Herr",
          "speaker_experience": [
            "1. BOB Summer 2019: https://bobkonf.de/2019-summer/novakov.html",
            "2. LXScala 2019: https://lxscala-reactive.com/speakers/alexey-novakov/",
            "Slides: https://github.com/novakov-alexey/workshop-scala-msi-tpl/blob/master/slides/workshop-building-scala-microservice.pdf",
            "3. Rhein-Main Scala Meetup: Asynchronous Data Processing with Reactive Streams and Akka ",
            "https://www.meetup.com/Rhein-Main-Scala-Enthusiasts/events/244890805/",
            "https://speakerdeck.com/alexeyn/scala-reactive-streams"
          ],
          "contributes": [
            "1. http4s-spnego: https://github.com/novakov-alexey/http4s-spnego",
            "2. Kubernetes operator library: Freya - https://github.com/novakov-alexey/freya",
            "3. fs2-kafka contribution: https://github.com/fd4s/fs2-kafka/pull/251"
          ],
          "github": "novakov-alexey",
          "twitter": "@alexey_novakov",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Cats Effect で Kubernetes Operator を書く",
      "detail": "Scala と Cats Effect は Kubernetes(k8s) Operator のような関数型バックエンドアプリケーションを実装するには完璧なツールです。\nk8s Operator の実装と、fabric8 の k8s クライアントを使ってScala の小さいですが便利なライブラリへの導入についてしっかりお話します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " DevOps",
        " Microservices"
      ],
      "keywords": [
        "functional-programming, kubernetes, cats-effect"
      ],
      "speakers": [
        {
          "name": "Alexey Novakov",
          "icon": "/img/speakers/E15.jpg",
          "organization": "Herr",
          "speaker_experience": [
            "1. BOB Summer 2019: https://bobkonf.de/2019-summer/novakov.html",
            "2. LXScala 2019: https://lxscala-reactive.com/speakers/alexey-novakov/",
            "Slides: https://github.com/novakov-alexey/workshop-scala-msi-tpl/blob/master/slides/workshop-building-scala-microservice.pdf",
            "3. Rhein-Main Scala Meetup: Asynchronous Data Processing with Reactive Streams and Akka ",
            "https://www.meetup.com/Rhein-Main-Scala-Enthusiasts/events/244890805/",
            "https://speakerdeck.com/alexeyn/scala-reactive-streams"
          ],
          "contributes": [
            "1. http4s-spnego: https://github.com/novakov-alexey/http4s-spnego",
            "2. Kubernetes operator library: Freya - https://github.com/novakov-alexey/freya",
            "3. fs2-kafka contribution: https://github.com/fd4s/fs2-kafka/pull/251"
          ],
          "github": "novakov-alexey",
          "twitter": "@alexey_novakov",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E16",
    "en": {
      "title": "# Touch the Types - Types at your fingertips in IntelliJ Scala",
      "detail": "Scala's powerful type system helps you develop complex programs with less runtime errors. But sometimes understanding the types while programming becomes a challenge onto itself. I will show you how the IntelliJ Scala plugin helps you get a grip on your types to support your development flow.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Tools",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "intellij",
        "types",
        "tools"
      ],
      "speakers": [
        {
          "name": "Justin Kaeser",
          "icon": "https://en.gravatar.com/userimage/40703495/21def3f397a6976d1f9ae5239e0da870.jpg?size=200",
          "organization": "JetBrains",
          "speaker_experience": [
            "Scala Days, Scale By The Bay, Scala World (and many others)",
            "",
            "Integrating Developer Experiences talk at Scala Days:",
            "https://portal.klewel.com/watch/webcast/scala-days-2019/talk/22/"
          ],
          "contributes": [
            "Scala plugin for IntelliJ IDEA: https://github.com/JetBrains/intellij-scala",
            "Build Server Protocol: https://github.com/build-server-protocol/build-server-protocol",
            "Gringotts: https://github.com/MinecraftWars/Gringotts"
          ],
          "github": "jastice",
          "twitter": "ebenwert",
          "other_sns": "https://www.linkedin.com/in/justinkaeser/"
        }
      ]
    },
    "ja": {
      "title": "型に触ろう - IntelliJ Scalaなら、すぐそこに型がある",
      "detail": "Scalaの強力な型システムは、複雑なプログラムでも実行時のエラーが少ないものを開発することを可能とします。\nしかし時として、プログラミングもして型も理解しなければならないのは面倒なことです。\n\nそこでIntelliJ Scala pluginによって、開発者がどのように型を把握したり、開発フローを改善できるかお見せします。\n",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Tools",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "intellij",
        "types",
        "tools"
      ],
      "speakers": [
        {
          "name": "Justin Kaeser",
          "icon": "https://en.gravatar.com/userimage/40703495/21def3f397a6976d1f9ae5239e0da870.jpg?size=200",
          "organization": "JetBrains",
          "speaker_experience": [
            "Scala Days, Scale By The Bay, Scala World (and many others)",
            "",
            "Integrating Developer Experiences talk at Scala Days:",
            "https://portal.klewel.com/watch/webcast/scala-days-2019/talk/22/"
          ],
          "contributes": [
            "Scala plugin for IntelliJ IDEA: https://github.com/JetBrains/intellij-scala",
            "Build Server Protocol: https://github.com/build-server-protocol/build-server-protocol",
            "Gringotts: https://github.com/MinecraftWars/Gringotts"
          ],
          "github": "jastice",
          "twitter": "ebenwert",
          "other_sns": "https://www.linkedin.com/in/justinkaeser/"
        }
      ]
    }
  },
  {
    "id": "E17",
    "en": {
      "title": "Functional Programming by Repetition",
      "detail": "As students of Functional Programming, it is sometimes difficult to find motivation to learn the many concepts of FP. To sidestep this problem we will appeal to one of the well known maxims of software development: Don’t Repeat Yourself.\nIn this beginner-friendly talk, we will see how the simple urge to reduce repetition in our code can lead to the discovery of various functional abstractions. Rather than motivating things like Monads and Applicatives with a dose of abstract nonsense, leveraging the point of view of DRY will motivate them with the very relatable need to avoid code duplication.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "FP",
        "DRY"
      ],
      "speakers": [
        {
          "name": "Daniel Beskin",
          "icon": "https://avatars2.githubusercontent.com/u/784734",
          "organization": "",
          "speaker_experience": [
            "- \"What Orwell's 1984 Can Teach Us about Programming\"",
            "  Slides: https://ncreep.github.io/1984-talk/presentation/presentation.html",
            "  Lambda Days, 2017, Poland: https://www.youtube.com/watch?v=nRZuSZZBzoI",
            "  LambdaConf, 2017, US: https://www.youtube.com/watch?v=5UWzGbf04so",
            "  Scala Swarm, 2017, Portugal: https://www.youtube.com/watch?v=jjIfvbkSKGU",
            "  Scala IO,  2017, France: https://www.youtube.com/watch?v=QDaIC6OD6sU",
            "",
            "- \"Compile Time Logic Programming in Scala - What For?\"",
            "  Slides: https://ncreep.github.io/compile-time-logic-programming-talk/presentation/presentation.html",
            "  Scala eXchange, 2017, UK: https://skillsmatter.com/skillscasts/10957-compile-time-logic-programming-in-scala-what-for",
            "  ScalaUA, 2019, Ukraine: https://www.youtube.com/watch?v=wHrdrRvC1Wg",
            "  ScalaWorld 2019, UK: https://www.youtube.com/watch?v=9i06TyYM_lI",
            "",
            "- \"Sharing Is Caring - How to Let the Compiler Know What You're Thinking\"",
            "  Slides: https://ncreep.github.io/sharing-is-caring-talk/presentation/presentation.html",
            "  BeeScala, 2017, Slovenia: https://www.youtube.com/watch?v=Slu_PYZlcUA",
            "  Scala IO, 2018, France: https://www.youtube.com/watch?v=GsXVxhKpUwI",
            "",
            "- \"Category Theory as a Tool for Thought\"",
            "  Slides: https://github.com/ncreep/category-theory-as-a-tool-for-thought",
            "  LambdaConf 2019, US"
          ],
          "contributes": [],
          "github": "ncreep",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "繰り返しによる関数型プログラミング",
      "detail": "関数型プログラミングを学習する人にとって、FPの数多くあるコンセプトを学ぶためのモチベーションを高めることは難しい時があります。\nこの困難をのりこえるために、ソフトウェア開発におけるよく知られた格言であるこの言葉を贈ります。Don't Repeat Yourself.\nこの初学者に優しいトークでは、コードの繰り返しを減すというシンプルな取り組みが、様々な関数的な抽象化の発見につながるということをお見せしたいと思います。\nモナドやアプリカティブといった抽象的ナンセンスによるドーピングでモチベーションを保つより、むしろ、DRYの観点に重点を置くほうが、コードの重複を避けるニーズにも合致するのでモチベーションを保てるでしょう。\n",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "FP",
        "DRY"
      ],
      "speakers": [
        {
          "name": "Daniel Beskin",
          "icon": "https://avatars2.githubusercontent.com/u/784734",
          "organization": "",
          "speaker_experience": [
            "- \"What Orwell's 1984 Can Teach Us about Programming\"",
            "  Slides: https://ncreep.github.io/1984-talk/presentation/presentation.html",
            "  Lambda Days, 2017, Poland: https://www.youtube.com/watch?v=nRZuSZZBzoI",
            "  LambdaConf, 2017, US: https://www.youtube.com/watch?v=5UWzGbf04so",
            "  Scala Swarm, 2017, Portugal: https://www.youtube.com/watch?v=jjIfvbkSKGU",
            "  Scala IO,  2017, France: https://www.youtube.com/watch?v=QDaIC6OD6sU",
            "",
            "- \"Compile Time Logic Programming in Scala - What For?\"",
            "  Slides: https://ncreep.github.io/compile-time-logic-programming-talk/presentation/presentation.html",
            "  Scala eXchange, 2017, UK: https://skillsmatter.com/skillscasts/10957-compile-time-logic-programming-in-scala-what-for",
            "  ScalaUA, 2019, Ukraine: https://www.youtube.com/watch?v=wHrdrRvC1Wg",
            "  ScalaWorld 2019, UK: https://www.youtube.com/watch?v=9i06TyYM_lI",
            "",
            "- \"Sharing Is Caring - How to Let the Compiler Know What You're Thinking\"",
            "  Slides: https://ncreep.github.io/sharing-is-caring-talk/presentation/presentation.html",
            "  BeeScala, 2017, Slovenia: https://www.youtube.com/watch?v=Slu_PYZlcUA",
            "  Scala IO, 2018, France: https://www.youtube.com/watch?v=GsXVxhKpUwI",
            "",
            "- \"Category Theory as a Tool for Thought\"",
            "  Slides: https://github.com/ncreep/category-theory-as-a-tool-for-thought",
            "  LambdaConf 2019, US"
          ],
          "contributes": [],
          "github": "ncreep",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E18",
    "en": {
      "title": "Make Illegal States Unrepresentable",
      "detail": "The ideal coined by Yaron Minsky, “make illegal states unrepresentable” is as simple as it is profound. The benefits of writing software that conforms to this maxim range from easier to comprehend code, to a reduced number of bugs. It so happens that strongly-typed Functional Programming is particularly well-suited to achieve the goal of reducing the number of illegal states of a system.\n\nIn this beginner-friendly talk, we will see a number of simple techniques that we can apply to our code to get ourselves closer to the ideal of making illegal states unrepresentable.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "FP",
        "Types"
      ],
      "speakers": [
        {
          "name": "Daniel Beskin",
          "icon": "https://avatars2.githubusercontent.com/u/784734",
          "organization": "",
          "speaker_experience": [
            "- \"What Orwell's 1984 Can Teach Us about Programming\"",
            "  Slides: https://ncreep.github.io/1984-talk/presentation/presentation.html",
            "  Lambda Days, 2017, Poland: https://www.youtube.com/watch?v=nRZuSZZBzoI",
            "  LambdaConf, 2017, US: https://www.youtube.com/watch?v=5UWzGbf04so",
            "  Scala Swarm, 2017, Portugal: https://www.youtube.com/watch?v=jjIfvbkSKGU",
            "  Scala IO,  2017, France: https://www.youtube.com/watch?v=QDaIC6OD6sU",
            "",
            "- \"Compile Time Logic Programming in Scala - What For?\"",
            "  Slides: https://ncreep.github.io/compile-time-logic-programming-talk/presentation/presentation.html",
            "  Scala eXchange, 2017, UK: https://skillsmatter.com/skillscasts/10957-compile-time-logic-programming-in-scala-what-for",
            "  ScalaUA, 2019, Ukraine: https://www.youtube.com/watch?v=wHrdrRvC1Wg",
            "  ScalaWorld 2019, UK: https://www.youtube.com/watch?v=9i06TyYM_lI",
            "",
            "- \"Sharing Is Caring - How to Let the Compiler Know What You're Thinking\"",
            "  Slides: https://ncreep.github.io/sharing-is-caring-talk/presentation/presentation.html",
            "  BeeScala, 2017, Slovenia: https://www.youtube.com/watch?v=Slu_PYZlcUA",
            "  Scala IO, 2018, France: https://www.youtube.com/watch?v=GsXVxhKpUwI",
            "",
            "- \"Category Theory as a Tool for Thought\"",
            "  Slides: https://github.com/ncreep/category-theory-as-a-tool-for-thought",
            "  LambdaConf 2019, US"
          ],
          "contributes": [],
          "github": "ncreep",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "違法な状態は表現できなくしよう",
      "detail": "Yaron Minskyによって作られた崇高な格言“make illegal states unrepresentable”はシンプル格言であるものの示唆にも富んでいます。この格言に準拠してソフトウェアを書くことで、理解しやすいコードを書くことから、バグの数を減らすことまで多岐にわたる利益を享受できます。\n偶然にも、強い型を持つ関数型言語が、システムの違法な状態を減らす目標を達成するのに、大変適しています。\nこの初学者に優しいトークでは、違法な状態を表現出来なくするという理想に近づくために、実際のコードに適用できるシンプルなテクニックをいくつも紹介したいと思います。\n",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "FP",
        "Types"
      ],
      "speakers": [
        {
          "name": "Daniel Beskin",
          "icon": "https://avatars2.githubusercontent.com/u/784734",
          "organization": "",
          "speaker_experience": [
            "- \"What Orwell's 1984 Can Teach Us about Programming\"",
            "  Slides: https://ncreep.github.io/1984-talk/presentation/presentation.html",
            "  Lambda Days, 2017, Poland: https://www.youtube.com/watch?v=nRZuSZZBzoI",
            "  LambdaConf, 2017, US: https://www.youtube.com/watch?v=5UWzGbf04so",
            "  Scala Swarm, 2017, Portugal: https://www.youtube.com/watch?v=jjIfvbkSKGU",
            "  Scala IO,  2017, France: https://www.youtube.com/watch?v=QDaIC6OD6sU",
            "",
            "- \"Compile Time Logic Programming in Scala - What For?\"",
            "  Slides: https://ncreep.github.io/compile-time-logic-programming-talk/presentation/presentation.html",
            "  Scala eXchange, 2017, UK: https://skillsmatter.com/skillscasts/10957-compile-time-logic-programming-in-scala-what-for",
            "  ScalaUA, 2019, Ukraine: https://www.youtube.com/watch?v=wHrdrRvC1Wg",
            "  ScalaWorld 2019, UK: https://www.youtube.com/watch?v=9i06TyYM_lI",
            "",
            "- \"Sharing Is Caring - How to Let the Compiler Know What You're Thinking\"",
            "  Slides: https://ncreep.github.io/sharing-is-caring-talk/presentation/presentation.html",
            "  BeeScala, 2017, Slovenia: https://www.youtube.com/watch?v=Slu_PYZlcUA",
            "  Scala IO, 2018, France: https://www.youtube.com/watch?v=GsXVxhKpUwI",
            "",
            "- \"Category Theory as a Tool for Thought\"",
            "  Slides: https://github.com/ncreep/category-theory-as-a-tool-for-thought",
            "  LambdaConf 2019, US"
          ],
          "contributes": [],
          "github": "ncreep",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E19",
    "en": {
      "title": "Sharing Is Caring - How to Let the Compiler Know What You're Thinking",
      "detail": "As Scala developers, it is not uncommon to find ourselves struggling against the compiler. And although the compiler tries to communicate with us, the result can be both incomprehensible and one-sided. \n\nIn this beginner-friendly talk, we will see how we can improve things by sharing our thoughts with the compiler - be it by using more descriptive types, leveraging implicits, or even churning out some macros. By this simple act of sharing, we can elevate our relationship with the compiler into a meaningful, and hopefully productive, dialog.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "FP",
        "Types"
      ],
      "speakers": [
        {
          "name": "Daniel Beskin",
          "icon": "https://avatars2.githubusercontent.com/u/784734",
          "organization": "",
          "speaker_experience": [],
          "contributes": [
            "- \"What Orwell's 1984 Can Teach Us about Programming\"",
            "  Slides: https://ncreep.github.io/1984-talk/presentation/presentation.html",
            "  Lambda Days, 2017, Poland: https://www.youtube.com/watch?v=nRZuSZZBzoI",
            "  LambdaConf, 2017, US: https://www.youtube.com/watch?v=5UWzGbf04so",
            "  Scala Swarm, 2017, Portugal: https://www.youtube.com/watch?v=jjIfvbkSKGU",
            "  Scala IO,  2017, France: https://www.youtube.com/watch?v=QDaIC6OD6sU",
            "",
            "- \"Compile Time Logic Programming in Scala - What For?\"",
            "  Slides: https://ncreep.github.io/compile-time-logic-programming-talk/presentation/presentation.html",
            "  Scala eXchange, 2017, UK: https://skillsmatter.com/skillscasts/10957-compile-time-logic-programming-in-scala-what-for",
            "  ScalaUA, 2019, Ukraine: https://www.youtube.com/watch?v=wHrdrRvC1Wg",
            "  ScalaWorld 2019, UK: https://www.youtube.com/watch?v=9i06TyYM_lI",
            "",
            "- \"Sharing Is Caring - How to Let the Compiler Know What You're Thinking\"",
            "  Slides: https://ncreep.github.io/sharing-is-caring-talk/presentation/presentation.html",
            "  BeeScala, 2017, Slovenia: https://www.youtube.com/watch?v=Slu_PYZlcUA",
            "  Scala IO, 2018, France: https://www.youtube.com/watch?v=GsXVxhKpUwI",
            "",
            "- \"Category Theory as a Tool for Thought\"",
            "  Slides: https://github.com/ncreep/category-theory-as-a-tool-for-thought",
            "  LambdaConf 2019, US"
          ],
          "github": "ncreep",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "分かち合うことは、思いやり。コンパイラにあたなの思考を分からせる方法",
      "detail": "Scala 開発者にとって、気づくとコンパイラと格闘していることは珍しくないです。\nコンパイラも我々と意思を通わせようとしているのですが、理解できず、一方的な結果に終わります。\nこの初心者にも優しいトークでは、私達の思考をコンパイラと共有することでどれだけ事態が改善されるかお見せします。より記述的な型を使い、implicit を活用し、いくらかのマクロを量産するのです。\nこのシンプルな共有により、コンパイラとの関係は高まり、有意義で、うまくいけば生産的な対話が可能となるのです。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "FP",
        "Types"
      ],
      "speakers": [
        {
          "name": "Daniel Beskin",
          "icon": "https://avatars2.githubusercontent.com/u/784734",
          "organization": "",
          "speaker_experience": [],
          "contributes": [
            "- \"What Orwell's 1984 Can Teach Us about Programming\"",
            "  Slides: https://ncreep.github.io/1984-talk/presentation/presentation.html",
            "  Lambda Days, 2017, Poland: https://www.youtube.com/watch?v=nRZuSZZBzoI",
            "  LambdaConf, 2017, US: https://www.youtube.com/watch?v=5UWzGbf04so",
            "  Scala Swarm, 2017, Portugal: https://www.youtube.com/watch?v=jjIfvbkSKGU",
            "  Scala IO,  2017, France: https://www.youtube.com/watch?v=QDaIC6OD6sU",
            "",
            "- \"Compile Time Logic Programming in Scala - What For?\"",
            "  Slides: https://ncreep.github.io/compile-time-logic-programming-talk/presentation/presentation.html",
            "  Scala eXchange, 2017, UK: https://skillsmatter.com/skillscasts/10957-compile-time-logic-programming-in-scala-what-for",
            "  ScalaUA, 2019, Ukraine: https://www.youtube.com/watch?v=wHrdrRvC1Wg",
            "  ScalaWorld 2019, UK: https://www.youtube.com/watch?v=9i06TyYM_lI",
            "",
            "- \"Sharing Is Caring - How to Let the Compiler Know What You're Thinking\"",
            "  Slides: https://ncreep.github.io/sharing-is-caring-talk/presentation/presentation.html",
            "  BeeScala, 2017, Slovenia: https://www.youtube.com/watch?v=Slu_PYZlcUA",
            "  Scala IO, 2018, France: https://www.youtube.com/watch?v=GsXVxhKpUwI",
            "",
            "- \"Category Theory as a Tool for Thought\"",
            "  Slides: https://github.com/ncreep/category-theory-as-a-tool-for-thought",
            "  LambdaConf 2019, US"
          ],
          "github": "ncreep",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E20",
    "en": {
      "title": "Functional programming and the JVM",
      "detail": "Functional programming has a lot of advantages, but it does not fit naturally on the metal of our machines. Did you ever wonder how functional Scala code is run on the JVM? In this talk we will look at the way functional abstractions are translated to bytecode, and what this means for performance.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "performance",
        "jvm"
      ],
      "speakers": [
        {
          "name": "Vincent de Haan",
          "icon": "https://media-exp2.licdn.com/dms/image/C4D03AQGsxuQhXLqvhg/profile-displayphoto-shrink_200_200/0?e=1584576000&v=beta&t=-VzPC1l1jPc0g5_ggG0zYK_klBzEWD2L7cGyPg81hUc",
          "organization": "Ordina, software engineer",
          "speaker_experience": [
            "LX Scala & Reactive 2019: https://lxscala-reactive.com/speakers/vincent-de-haan/",
            "In company conferences",
            "I have teaching experience with university level math courses"
          ],
          "contributes": [],
          "github": "vincentdehaan",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "関数型プログラミングとJVM",
      "detail": "関数型プログラミングには多くの利点がありますが、マシン上で動かす際にはそのままではうまく適合しません。\nJVMで関数型Scalaコードがどのように動作するのか、疑問に思ったことはありませんか？\n この講演では、関数型プログラミングの抽象化がどのようにバイトコードに変換されるかと、パフォーマンスにとって何を意味するのかを見ていきます。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "performance",
        "jvm"
      ],
      "speakers": [
        {
          "name": "Vincent de Haan",
          "icon": "https://media-exp2.licdn.com/dms/image/C4D03AQGsxuQhXLqvhg/profile-displayphoto-shrink_200_200/0?e=1584576000&v=beta&t=-VzPC1l1jPc0g5_ggG0zYK_klBzEWD2L7cGyPg81hUc",
          "organization": "Ordina, software engineer",
          "speaker_experience": [
            "LX Scala & Reactive 2019: https://lxscala-reactive.com/speakers/vincent-de-haan/",
            "In company conferences",
            "I have teaching experience with university level math courses"
          ],
          "contributes": [],
          "github": "vincentdehaan",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E21",
    "en": {
      "title": "Refactoring using types",
      "detail": "Did you ever encounter a codebase that was so messy that you didn’t even know where to start refactoring? Here’s an idea: start at the types. In this talk I will show how to refactor based on the types using real world examples. The main idea is to make illegal states unrepresentable.",
      "language": "English",
      "length": 40,
      "tags": [
        "Best Practices",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "refactoring",
        "types"
      ],
      "speakers": [
        {
          "name": "Vincent de Haan",
          "icon": "https://media-exp2.licdn.com/dms/image/C4D03AQGsxuQhXLqvhg/profile-displayphoto-shrink_200_200/0?e=1584576000&v=beta&t=-VzPC1l1jPc0g5_ggG0zYK_klBzEWD2L7cGyPg81hUc",
          "organization": "Ordina, software engineer",
          "speaker_experience": [
            "LX Scala & Reactive 2019: https://lxscala-reactive.com/speakers/vincent-de-haan/",
            "In company conferences",
            "I have teaching experience with university level math courses"
          ],
          "contributes": [],
          "github": "vincentdehaan",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "型によるリファクタリング",
      "detail": "散らかりすぎていて、どこからリファクタリングを始めたらいいか分からないようなコードベースに遭遇したことはありませんか？そんなときは型から始めてください。このトークでは実際の例を使って型によるリファクタリングの仕方をお見せします。中心となるアイデアは違法な状態を表現不能にすることです。",
      "language": "English",
      "length": 40,
      "tags": [
        "Best Practices",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "refactoring",
        "types"
      ],
      "speakers": [
        {
          "name": "Vincent de Haan",
          "icon": "https://media-exp2.licdn.com/dms/image/C4D03AQGsxuQhXLqvhg/profile-displayphoto-shrink_200_200/0?e=1584576000&v=beta&t=-VzPC1l1jPc0g5_ggG0zYK_klBzEWD2L7cGyPg81hUc",
          "organization": "Ordina, software engineer",
          "speaker_experience": [
            "LX Scala & Reactive 2019: https://lxscala-reactive.com/speakers/vincent-de-haan/",
            "In company conferences",
            "I have teaching experience with university level math courses"
          ],
          "contributes": [],
          "github": "vincentdehaan",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E22",
    "en": {
      "title": "Expectations vs Reality: Working with Data @ Spotify",
      "detail": "In the real-world, datasets don’t always conform to our expectations. We will discuss tools that have been built at Spotify to help data producers and consumers better understand the contents of data they are working with, and standardize the process of working with data across a large and complex organization.",
      "language": "English",
      "length": 40,
      "tags": [
        "Big Data / Fast Data",
        " Best Practices"
      ],
      "keywords": [
        "Big Data",
        "Typeclass Derivation",
        "Pipeline Testing"
      ],
      "speakers": [
        {
          "name": "Idrees Khan",
          "icon": "/img/speakers/E22.jpg",
          "organization": "Senior Data Infrastructure Engineer at Spotify",
          "speaker_experience": [
            "I have presented at",
            "Scale By The Bay Oakland 2019 - https://www.youtube.com/watch?v=lRpB76CXMd4",
            "NABD Paris 2019",
            "Scala Up North Toronto 2018 - https://www.youtube.com/watch?v=SOLM8t5snGM"
          ],
          "contributes": [
            "https://github.com/spotify/ratatool"
          ],
          "github": "idreeskhan",
          "twitter": "idreesxkhan",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "データ処理の期待と現実@Spotify",
      "detail": "現実世界ではデータセットはいつも我々の期待に適合するとは限りません。\nSpotify で開発されたツールについてお話します。このツールによってデータのプロデューサー、コンシューマーが取り扱うデータの内容をよりよく理解できるようになり、また巨大で複雑な組織内でのデータ処理プロセスを標準化するのに役立ちました。",
      "language": "English",
      "length": 40,
      "tags": [
        "Big Data / Fast Data",
        " Best Practices"
      ],
      "keywords": [
        "Big Data",
        "Typeclass Derivation",
        "Pipeline Testing"
      ],
      "speakers": [
        {
          "name": "Idrees Khan",
          "icon": "/img/speakers/E22.jpg",
          "organization": "Senior Data Infrastructure Engineer at Spotify",
          "speaker_experience": [
            "I have presented at",
            "Scale By The Bay Oakland 2019 - https://www.youtube.com/watch?v=lRpB76CXMd4",
            "NABD Paris 2019",
            "Scala Up North Toronto 2018 - https://www.youtube.com/watch?v=SOLM8t5snGM"
          ],
          "contributes": [
            "https://github.com/spotify/ratatool"
          ],
          "github": "idreeskhan",
          "twitter": "idreesxkhan",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J1",
    "en": {
      "title": "DDD optimized framework Refuel",
      "detail": "Introducing Refuel, a framework based on Dependency Injection in layered architecture.\nIt is flexible and fast, and can fully demonstrate the expressive power of Scala.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Software Design and Architecture"
      ],
      "keywords": [
        "Dependency Injection",
        "Architecture design",
        "DDD"
      ],
      "speakers": [
        {
          "name": "giiita",
          "icon": "/img/speakers/J1.jpg",
          "organization": "株式会社セプテーニ・オリジナル ソフトウェアエンジニア",
          "speaker_experience": [
            "2019Scala秋祭り"
          ],
          "contributes": [
            "Refuel",
            "sbt-protoc"
          ],
          "github": "giiita",
          "twitter": "giiita22",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "DDD optimized framework Refuel",
      "detail": "レイヤードアーキテクチャにおけるDependency Injectionをベースとしたフレームワーク、Refuelの紹介をします。\n柔軟で高速、かつ、Scalaならではの表現力を十分に発揮することができます。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Software Design and Architecture"
      ],
      "keywords": [
        "Dependency Injection",
        "Architecture design",
        "DDD"
      ],
      "speakers": [
        {
          "name": "giiita",
          "icon": "/img/speakers/J1.jpg",
          "organization": "株式会社セプテーニ・オリジナル ソフトウェアエンジニア",
          "speaker_experience": [
            "2019Scala秋祭り"
          ],
          "contributes": [
            "Refuel",
            "sbt-protoc"
          ],
          "github": "giiita",
          "twitter": "giiita22",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J2",
    "en": {
      "title": "Market positioning of Scala 3",
      "detail": "Was Scala's marketing strategy wrong? Some newer languages attracted more developers, while Scala houses struggled to hire developers and the language couldn't sell its killer features very well. I'll discuss if Scala 3 changes this, analyzing other language's strategies and business trends.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Others"
      ],
      "keywords": [
        "Scala 3",
        "hiring",
        "business"
      ],
      "speakers": [
        {
          "name": "Richard Imaoka",
          "icon": "https://s.gravatar.com/avatar/14bfbc98a7d5ed3574be08f6b176ce70?s=80",
          "organization": "マーベリック株式会社 技術広報",
          "speaker_experience": [
            "Scala 関西 Summit 2019 https://speakerdeck.com/richardimaokajp/javafei-tong-qi-chu-li",
            "builderscon 2018 https://builderscon.io/tokyo/2018/session/3b06e658-0386-4603-be45-798f77361b86",
            "Fun Fun Functional (2) 関数型言語Lightning Talks!! https://speakerdeck.com/richardimaokajp/scala-ziowobatutichu-li-nishi-tutemita"
          ],
          "contributes": [],
          "github": "richardimaoka",
          "twitter": "RichardImaokaJP",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scala 3のマーケット・ポジショニング",
      "detail": "Scalaは過去のマーケティング戦略を間違ったのでしょうか？いくつかの後発言語はScalaより多くの開発者を獲得しました。一方Scalaは開発者採用が難しく、キラーフィーチャーのない言語になったのでしょうか？この発表は技術的側面に加え、他言語の拡大戦略やビジネストレンドを分析し、Scala 3が現状を変えるのか、私達開発者に何を与えるのか、私達がScalaや技術の発展にどう貢献できるか検討します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Others"
      ],
      "keywords": [
        "Scala 3",
        "hiring",
        "business"
      ],
      "speakers": [
        {
          "name": "リチャード 伊真岡",
          "icon": "https://s.gravatar.com/avatar/14bfbc98a7d5ed3574be08f6b176ce70?s=80",
          "organization": "マーベリック株式会社 技術広報",
          "speaker_experience": [
            "Scala 関西 Summit 2019 https://speakerdeck.com/richardimaokajp/javafei-tong-qi-chu-li",
            "builderscon 2018 https://builderscon.io/tokyo/2018/session/3b06e658-0386-4603-be45-798f77361b86",
            "Fun Fun Functional (2) 関数型言語Lightning Talks!! https://speakerdeck.com/richardimaokajp/scala-ziowobatutichu-li-nishi-tutemita"
          ],
          "contributes": [],
          "github": "richardimaoka",
          "twitter": "RichardImaokaJP",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J3",
    "en": {
      "title": "Building a web app using scalajs-react",
      "detail": "Scala.js is a fascinating choice for Scala programmers and a powerful tool for some uses.\nI’ll introduce some strategies for server connection, project structure, debugging and such based on a real example of a SPA internal management tool created with scalajs-react.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Others"
      ],
      "keywords": [
        "Scala.js",
        "Frontend",
        "React"
      ],
      "speakers": [
        {
          "name": "Yuichiro Iwai",
          "icon": "https://avatars1.githubusercontent.com/u/6065514",
          "organization": "",
          "speaker_experience": [
            "札幌在住の頃にScalaの勉強会を主催していました",
            "https://sapporo-scala.connpass.com/event/89313/",
            "",
            "Fun Fun Functional(3)",
            "https://opt.connpass.com/event/144924/ で発表しました",
            "https://speakerdeck.com/yuiwai/frontend-with-scalajs-react"
          ],
          "contributes": [],
          "github": "yuiwai",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "scalajs-reactで内部向けWebツールを構築する",
      "detail": "Scala.jsはScalaを愛用するプログラマにとっては魅力的な選択肢であり、用途によっては非常に強力なメリットを享受出来ます。\n内部向けのブラウザ上で動作するSPAとしてscalajs-reactで構築したツールを例に、サーバとの連携、プロジェクト構成、動作検証など、具体的な戦略をご紹介します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Others"
      ],
      "keywords": [
        "Scala.js",
        "Frontend",
        "React"
      ],
      "speakers": [
        {
          "name": "岩井 雄一郎",
          "icon": "https://avatars1.githubusercontent.com/u/6065514",
          "organization": "",
          "speaker_experience": [
            "札幌在住の頃にScalaの勉強会を主催していました",
            "https://sapporo-scala.connpass.com/event/89313/",
            "",
            "Fun Fun Functional(3)",
            "https://opt.connpass.com/event/144924/ で発表しました",
            "https://speakerdeck.com/yuiwai/frontend-with-scalajs-react"
          ],
          "contributes": [],
          "github": "yuiwai",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E23",
    "en": {
      "title": "Keep your sanity with compositional tracing",
      "detail": "Logging is not enough for building distributed systems that you can investigate in case of production issues (which will happen). As an alternative, we can use tracing.\n\nI’ll go through a process of implementing tracing, starting with the simplest approach and going to a more compositional one.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Microservices"
      ],
      "keywords": [
        "distributed systems, tracing, microservices"
      ],
      "speakers": [
        {
          "name": "Jakub Kozłowski",
          "icon": "https://blog.kubukoz.com/assets/images/kubukoz.jpg",
          "organization": "",
          "speaker_experience": [
            "I spoke at Scalar, Scala World and Functional Scala (London). Here are the videos:",
            "",
            "https://www.youtube.com/watch?v=oluPEFlXumw",
            "https://www.youtube.com/watch?v=EQWAQF6Yj5Q",
            "https://www.youtube.com/watch?v=fZO2lV2xjEo"
          ],
          "contributes": [
            "I help maintain fs2 and redis4cats, sometimes I commit to cats-effect."
          ],
          "github": "kubukoz",
          "twitter": "kubukoz",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "合成可能なトレーシングで平静を保とう",
      "detail": "ロギングは、分散システムの構築において、(必ず発生する）プロダクション環境での問題を調査するのに充分とは言えません。その代わりに、私達はトレーシングを用います。\nシンプルなアプローチから始めて、さらに合成可能なものへと、トレーシングの実装プロセスをお話します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Microservices"
      ],
      "keywords": [
        "distributed systems, tracing, microservices"
      ],
      "speakers": [
        {
          "name": "Jakub Kozłowski",
          "icon": "https://blog.kubukoz.com/assets/images/kubukoz.jpg",
          "organization": "",
          "speaker_experience": [
            "I spoke at Scalar, Scala World and Functional Scala (London). Here are the videos:",
            "",
            "https://www.youtube.com/watch?v=oluPEFlXumw",
            "https://www.youtube.com/watch?v=EQWAQF6Yj5Q",
            "https://www.youtube.com/watch?v=fZO2lV2xjEo"
          ],
          "contributes": [
            "I help maintain fs2 and redis4cats, sometimes I commit to cats-effect."
          ],
          "github": "kubukoz",
          "twitter": "kubukoz",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E24",
    "en": {
      "title": "A sky full of streams - embracing compositionality of functional streams",
      "detail": "Streaming sounds like a complicated concept, but the core principles can actually be relatively easy to understand. I would like to show what a functional streaming library looks like and how FS2 can simplify some of the things we often do in concurrent systems.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Microservices"
      ],
      "keywords": [
        "streaming",
        "concurrency",
        "functional programming"
      ],
      "speakers": [
        {
          "name": "Jakub Kozłowski",
          "icon": "https://blog.kubukoz.com/assets/images/kubukoz.jpg",
          "organization": "",
          "speaker_experience": [
            "I spoke at Scala Italy, Scalar and flatMap(Oslo).",
            "",
            "Videos:",
            "https://vimeo.com/368027707",
            "https://www.youtube.com/watch?v=fZO2lV2xjEo",
            "https://www.youtube.com/watch?v=HMs_F7LXTak"
          ],
          "contributes": [
            "I help maintain fs2 and redis4cats, and I sometimes contribute to cats-effect."
          ],
          "github": "kubukoz",
          "twitter": "kubukoz",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "空いっぱいのストリーム - 関数型ストリームの包括的な合成可能性",
      "detail": "ストリーミングと聞くと、複雑な概念のように聞こえます。しかし実際はその核となる原則は比較的理解しやすいものです。\n関数型ストリーミングのライブラリがどんなものか、そして、FS2 が並列システムにおいてよくある問題をどのように単純化するかお話します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Microservices"
      ],
      "keywords": [
        "streaming",
        "concurrency",
        "functional programming"
      ],
      "speakers": [
        {
          "name": "Jakub Kozłowski",
          "icon": "https://blog.kubukoz.com/assets/images/kubukoz.jpg",
          "organization": "",
          "speaker_experience": [
            "I spoke at Scala Italy, Scalar and flatMap(Oslo).",
            "",
            "Videos:",
            "https://vimeo.com/368027707",
            "https://www.youtube.com/watch?v=fZO2lV2xjEo",
            "https://www.youtube.com/watch?v=HMs_F7LXTak"
          ],
          "contributes": [
            "I help maintain fs2 and redis4cats, and I sometimes contribute to cats-effect."
          ],
          "github": "kubukoz",
          "twitter": "kubukoz",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E25",
    "en": {
      "title": "This is Not a Monad Tutorial",
      "detail": "Abstractions like Monad are often explained by examples for common types like Option. This talk explains Functor, Monad and other abstractions by showing where they are impossible to implement, exposing their laws and structure and building understanding of the guarantees they provide.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "typeclasses",
        "laws"
      ],
      "speakers": [
        {
          "name": "Alexey Kotlyarov",
          "icon": "https://pbs.twimg.com/profile_images/1221297488096681985/ElNbYS7D_400x400.jpg",
          "organization": "",
          "speaker_experience": [
            "Most recent conference was YOW! Lambda Jam: https://yowconference.com/talks/alexey-kotlyarov/yow-lambda-jam-2017/instances-for-everyone-free-generic-programming-in-haskell-12485/",
            "Apart from that, I've had presentations on Melbourne Scala User Group: https://www.meetup.com/Melbourne-Scala-User-Group/events/258778805/",
            "Melbourne Haskell User Group: https://www.meetup.com/Melbourne-Haskell-Users-Group/events/qfptslyxdbdc/"
          ],
          "contributes": [
            "I'm developing Serverless Haskell together with my colleagues at SEEK: https://github.com/seek-oss/serverless-haskell/",
            "I've also submitted patches to Circe and other Scala libraries."
          ],
          "github": "koterpillar",
          "twitter": "koterpillar",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "これはモナドの入門、ではない",
      "detail": "モナドのような抽象概念は、しばしばOptionのようなよくある型を使って説明されます。\n\nこのトークでは、逆に Functor、 Monadやその他の抽象概念がどのような状況で実装が不可能であるかを示すことで、それぞれのもつ法則・構造やそれらの保証するものを炙り出し、理解を構築していきます。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "typeclasses",
        "laws"
      ],
      "speakers": [
        {
          "name": "Alexey Kotlyarov",
          "icon": "https://pbs.twimg.com/profile_images/1221297488096681985/ElNbYS7D_400x400.jpg",
          "organization": "",
          "speaker_experience": [
            "Most recent conference was YOW! Lambda Jam: https://yowconference.com/talks/alexey-kotlyarov/yow-lambda-jam-2017/instances-for-everyone-free-generic-programming-in-haskell-12485/",
            "Apart from that, I've had presentations on Melbourne Scala User Group: https://www.meetup.com/Melbourne-Scala-User-Group/events/258778805/",
            "Melbourne Haskell User Group: https://www.meetup.com/Melbourne-Haskell-Users-Group/events/qfptslyxdbdc/"
          ],
          "contributes": [
            "I'm developing Serverless Haskell together with my colleagues at SEEK: https://github.com/seek-oss/serverless-haskell/",
            "I've also submitted patches to Circe and other Scala libraries."
          ],
          "github": "koterpillar",
          "twitter": "koterpillar",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J4",
    "en": {
      "title": "ZIO Introduction for Scala beginners",
      "detail": "Scala's Effect Systems has many choices, and there are situations where it is difficult for beginners to use Scala. I would recommend ZIO as the first choice for a team with Scala beginners. I will introduce basic usage, reasons to recommend, points of introducing into project, etc. with easy code.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Scalaビギナー（Scala歴1年くらいまで）"
      ],
      "keywords": [
        "Effect System, ZIO, Concurrency"
      ],
      "speakers": [
        {
          "name": "Ishibashi Ryuhei",
          "icon": "https://gravatar.com/avatar/184bb1d4907877239bd4f9ddeb5f1283?s=80&d=robohash&r=x",
          "organization": "Software developer at StanBy",
          "speaker_experience": [],
          "contributes": [],
          "github": "rysh",
          "twitter": "cactaceae",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scala初心者にこそお勧めしたいZIO",
      "detail": "ScalaのEffect Systemは選択肢が多数あり、Scala初心者が適切に選択することは難しい状況があります。Scala初心者や熟練者が少ないチームのファーストチョイスとしてZIOをお勧めしたいと思っています。基本的な使い方、初心者にお勧めする理由、プロジェクトへの導入のポイントなどを理解しいやすいコードとともに紹介したいと思います。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Scalaビギナー（Scala歴1年くらいまで）"
      ],
      "keywords": [
        "Effect System, ZIO, Concurrency"
      ],
      "speakers": [
        {
          "name": "石橋隆平",
          "icon": "https://gravatar.com/avatar/184bb1d4907877239bd4f9ddeb5f1283?s=80&d=robohash&r=x",
          "organization": "Software developer at StanBy",
          "speaker_experience": [],
          "contributes": [],
          "github": "rysh",
          "twitter": "cactaceae",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J5",
    "en": {
      "title": "Intuitive bidirectional string processing by string interpolation in Scala",
      "detail": "Even if an application only has to parse a string, it is often necessary to implement pretty-printing when creating test inputs.\nIn this presentation, we show our method to implement parsing and pretty-printing of strings at the same time.\nWe also show that it is possible to describe in a very intuitive notation by utilizing string interpolation.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "DSL",
        "bi-directional",
        "generics"
      ],
      "speakers": [
        {
          "name": "Kazuhiro Ichikawa",
          "icon": "/img/speakers/J5.png",
          "organization": "LINE株式会社 エンジニア",
          "speaker_experience": [
            "ScalaMatsuri2019 Scala における型クラス入門",
            "ScalaMatsuri2018 Scalaの言語機構を悪用して最強のDSLを作る方法",
            "<Programming> 2017 User-Defined Operators Including Name Binding for New Language Constructs https://programming-journal.org/2017/1/15/"
          ],
          "contributes": [],
          "github": "phenan",
          "twitter": "phenan",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "文字列補間の応用による直感的双方向文字列処理",
      "detail": "アプリケーションでは文字列を読み出す処理しかしない場合でも、テストの入力を作る場合には文字列を組み立てる処理を実装しなければならなくなることはよくある。\nそのような場合のための、文字列の読み出しと組み立てを同時に実装する手法を紹介する。\nまた、文字列補間(String Interpolation)を活用することで、非常に直感的な記法で記述が可能であることを示す。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "DSL",
        "bi-directional",
        "generics"
      ],
      "speakers": [
        {
          "name": "市川 和央 @phenan",
          "icon": "/img/speakers/J5.png",
          "organization": "LINE株式会社 エンジニア",
          "speaker_experience": [
            "ScalaMatsuri2019 Scala における型クラス入門",
            "ScalaMatsuri2018 Scalaの言語機構を悪用して最強のDSLを作る方法",
            "<Programming> 2017 User-Defined Operators Including Name Binding for New Language Constructs https://programming-journal.org/2017/1/15/"
          ],
          "contributes": [],
          "github": "phenan",
          "twitter": "phenan",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J6",
    "en": {
      "title": " Explain model-driven design based on business patterns using Scala",
      "detail": "\"Model-Driven Design Using Business Patterns\" by Pavel Hruby published in 2006 is a book that provides useful patterns related to Domain-Driven Design(DDD). This book introduces universal modeling patterns for business applications called REA (Resource, Event, Agent).\nBased on these REA structures, behavior patterns such as \"date\" and \"classification\" are also useful. I'm interested in how Scala expresses the patterns invented 10 years ago. This time I want to discuss some patterns from REA.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Software Design and Architecture"
      ],
      "keywords": [
        "DDD Modeling REA"
      ],
      "speakers": [
        {
          "name": "Junichi Kato",
          "icon": "/img/speakers/J6.jpg",
          "organization": "Chatwork Co., Ltd. Tech Lead",
          "speaker_experience": [
            "ScalaMatsuri 2019, AWS DevDay など"
          ],
          "contributes": [],
          "github": "j5ik2o",
          "twitter": "j5ik2o",
          "other_sns": "twiiter"
        }
      ]
    },
    "ja": {
      "title": "Scalaで解説する、ビジネスパターンによるモデル駆動設計",
      "detail": " 2007年発刊のPavel Hruby著「ビジネスパターンによるモデル駆動設計」はドメイン駆動設計に関連する有益なパターンを提供している書籍です。この書籍ではREA(Resource, Event, Agent)というビジネスアプリケーションにおいて普遍的なモデリングパターンを紹介しています。こういったREA構造を基に期日や分類などの振る舞いのパターンも役に立ちます。10年に考案されたこれらのパターンをScalaで現代に再現するにはどうするべきか、私は興味を持っています。REAからいくつかのパターンを抜粋して議論したいと思います。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Software Design and Architecture"
      ],
      "keywords": [
        "DDD Modeling REA"
      ],
      "speakers": [
        {
          "name": "かとじゅん",
          "icon": "/img/speakers/J6.jpg",
          "organization": "Chatwork株式会社 テックリード",
          "speaker_experience": [
            "ScalaMatsuri 2019, AWS DevDay など"
          ],
          "contributes": [],
          "github": "j5ik2o",
          "twitter": "j5ik2o",
          "other_sns": "twiiter"
        }
      ]
    }
  },
  {
    "id": "E26",
    "en": {
      "title": "Fast Type Classes with Dotty Macros",
      "detail": "Dotty brings first class support for type class derivation, but the resulting instances can be slow at runtime. We give an introduction to Dotty macros and take a look at how we can leverage them to implement an optimized version of type class derivation.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Software Design and Architecture"
      ],
      "keywords": [
        "dotty",
        "macros",
        "type-class-derivation"
      ],
      "speakers": [
        {
          "name": "Olivier Blanvillain",
          "icon": "https://people.epfl.ch/private/common/photos/links/184098.jpg?ts=1578816841",
          "organization": "EPFL",
          "speaker_experience": [
            "Scala Days 2018 (speaker 1) https://slideslive.com/38908156/applications-of-implicit-function-types",
            "ML Days Tokyo (speaker 2) https://speakerdeck.com/biboudis/highest-performance-stream-processing-in-meta-ocaml-and-scala-3"
          ],
          "contributes": [
            "Dotty compiler, Frameless, monadic-html"
          ],
          "github": "OlivierBlanvillain",
          "twitter": "",
          "other_sns": ""
        },
        {
          "proposalId": "E26",
          "name": "Aggelos Biboudis",
          "icon": "https://media-exp1.licdn.com/dms/image/C5603AQFzMa7v7WEQBg/profile-displayphoto-shrink_200_200/0?e=1585180800&v=beta&t=7LEdc9xdoyeo-tv13C9afwVUMgrEyGR7AEYo8f25DEs",
          "organization": "EPFL - Post Doc",
          "speaker_experience": [
            "POPL 2017 https://www.youtube.com/watch?v=ifMC8ysmQz8",
            "ECOOP 2015 https://www.youtube.com/watch?v=rHzgkMW2AZ0"
          ],
          "contributes": [
            "Dotty, strymonas.github.io"
          ],
          "github": "biboudis",
          "twitter": "biboudis",
          "other_sns": "https://www.instagram.com/aggelos_bibou/\nhttps://ch.linkedin.com/in/biboudis?trk=author_mini-profile_title"
        }
      ]
    },
    "ja": {
      "title": "Dottyマクロで高速な型クラス",
      "detail": "Dottyでは型クラス導出の第1級サポートを提供しますが、導き出されたインスタンスでは実行が遅い可能性があります。そこでDottyマクロをご紹介し、このマクロを使ってどのように型クラス導出を最適化するかお見せします。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Software Design and Architecture"
      ],
      "keywords": [
        "dotty",
        "macros",
        "type-class-derivation"
      ],
      "speakers": [
        {
          "name": "Olivier Blanvillain",
          "icon": "https://people.epfl.ch/private/common/photos/links/184098.jpg?ts=1578816841",
          "organization": "EPFL",
          "speaker_experience": [
            "Scala Days 2018 (speaker 1) https://slideslive.com/38908156/applications-of-implicit-function-types",
            "ML Days Tokyo (speaker 2) https://speakerdeck.com/biboudis/highest-performance-stream-processing-in-meta-ocaml-and-scala-3"
          ],
          "contributes": [
            "Dotty compiler, Frameless, monadic-html"
          ],
          "github": "OlivierBlanvillain",
          "twitter": "",
          "other_sns": ""
        },
        {
          "proposalId": "E26",
          "name": "Aggelos Biboudis",
          "icon": "https://media-exp1.licdn.com/dms/image/C5603AQFzMa7v7WEQBg/profile-displayphoto-shrink_200_200/0?e=1585180800&v=beta&t=7LEdc9xdoyeo-tv13C9afwVUMgrEyGR7AEYo8f25DEs",
          "organization": "EPFL - Post Doc",
          "speaker_experience": [
            "POPL 2017 https://www.youtube.com/watch?v=ifMC8ysmQz8",
            "ECOOP 2015 https://www.youtube.com/watch?v=rHzgkMW2AZ0"
          ],
          "contributes": [
            "Dotty, strymonas.github.io"
          ],
          "github": "biboudis",
          "twitter": "biboudis",
          "other_sns": "https://www.instagram.com/aggelos_bibou/\nhttps://ch.linkedin.com/in/biboudis?trk=author_mini-profile_title"
        }
      ]
    }
  },
  {
    "id": "E27",
    "en": {
      "title": "Caliban: Functional GraphQL Library for Scala",
      "detail": "Caliban is a library for GraphQL in Scala. It was designed with the goal of reducing boilerplate to a minimum while exposing a purely functional interface. In this talk, we’ll discover how to create a simple GraphQL API from the ground up, then we’ll dig into advanced features such as query optimization and middlewares. Finally, we will take a look at the recently released GraphQL client support.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Software Design and Architecture"
      ],
      "keywords": [
        "GraphQL",
        "FP",
        "ZIO"
      ],
      "speakers": [
        {
          "name": "Pierre Ricadat",
          "icon": "/img/speakers/E27.jpg",
          "organization": "",
          "speaker_experience": [
            "Functional Scala 2019 (London)",
            "video: https://www.youtube.com/watch?v=OC8PbviYUlQ",
            "slides: https://www.slideshare.net/PierreRicadat/designing-a-functional-graphql-library-204680947"
          ],
          "contributes": [
            "https://github.com/ghostdogpr/caliban",
            "https://github.com/zio/zio",
            "https://github.com/zio/zio-akka-cluster"
          ],
          "github": "ghostdogpr",
          "twitter": "ghostdogpr",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Caliban: 関数型GraphQLライブラリの設計",
      "detail": "GraphQL は REST に替わる公開API の強力な選択肢になりつつあります。このトークでは Scala で GraphQL バックエンドを記述するための関数型ライブラリ Caliban を紹介します。「どうやってボイラープレートを最小化したか」「明示的なエラーをどう持たせるか」「pub/sub処理」など、スクラッチからライブラリを開発しながら設計方針を説明します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Software Design and Architecture"
      ],
      "keywords": [
        "GraphQL",
        "FP",
        "ZIO"
      ],
      "speakers": [
        {
          "name": "Pierre Ricadat",
          "icon": "/img/speakers/E27.jpg",
          "organization": "",
          "speaker_experience": [
            "Functional Scala 2019 (London)",
            "video: https://www.youtube.com/watch?v=OC8PbviYUlQ",
            "slides: https://www.slideshare.net/PierreRicadat/designing-a-functional-graphql-library-204680947"
          ],
          "contributes": [
            "https://github.com/ghostdogpr/caliban",
            "https://github.com/zio/zio",
            "https://github.com/zio/zio-akka-cluster"
          ],
          "github": "ghostdogpr",
          "twitter": "ghostdogpr",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E28",
    "en": {
      "title": "Looking for the Needle in a Haystack of Dirty Data",
      "detail": "How could you possibly analyze a database of tens of billions of transactions containing really dirty data? And how to be fast on limited resources? At 1-OFD we do it every day with an open-source platform we created to get the job done. It’s a time-series storage on top of HBase, Akka and Spark.",
      "language": "English",
      "length": 40,
      "tags": [
        "Big Data / Fast Data",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Big Data",
        "HBase",
        "Spark"
      ],
      "speakers": [
        {
          "name": "Mikhail Limanskiy",
          "icon": "http://www.limansky.me/images/mikhail400x400.jpg",
          "organization": "Senior Scala Developer, 1-OFD",
          "speaker_experience": [
            "ScalaDays 2015 https://www.youtube.com/watch?v=5VNgXyefLso",
            "BeeScala 2017 https://www.youtube.com/watch?v=v_RuP218y4k",
            "ScalaConf 2019 (in Russian) https://www.youtube.com/watch?v=kw8PuCz3csI"
          ],
          "contributes": [
            "Currently I",
            "contribute to Yupana (https://github.com/rusexpertiza-llc/yupana) which is",
            "a main topic of my talk (unfortunately at the moment readme is in Russian,",
            "but we are working on it). Also I have several own open-source projects",
            "like:",
            "",
            "BeanPuree https://github.com/limansky/beanpuree",
            "MongoQuery https://github.com/limansky/mongoquery",
            "sbt-git-flow-version https://github.com/limansky/sbt-git-flow-version",
            "and some other. Sometimes I do random contributions to different projects,",
            "like Lift, Akka, or even GitLab."
          ],
          "github": "",
          "twitter": "mike_limansky",
          "other_sns": "Facebook: https://www.facebook.com/mike.limansky"
        }
      ]
    },
    "ja": {
      "title": "汚れたデータからあてのないデータを探して",
      "detail": "本当に汚れたデータが含まれている100億ものトランザクションを持つデータベースをどうやって分析出来るだろうか? 限られたリソースで、如何に速くできるだろうか? 1-OFDでは、オープンソースのプラットフォームを駆使してそのような分析を日常的に行っている。このプラットフォームは、HBase、Akka、Spark の上に作り上げた時系列のストレージである。",
      "language": "English",
      "length": 40,
      "tags": [
        "Big Data / Fast Data",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Big Data",
        "HBase",
        "Spark"
      ],
      "speakers": [
        {
          "name": "Mikhail Limanskiy",
          "icon": "http://www.limansky.me/images/mikhail400x400.jpg",
          "organization": "Senior Scala Developer, 1-OFD",
          "speaker_experience": [
            "ScalaDays 2015 https://www.youtube.com/watch?v=5VNgXyefLso",
            "BeeScala 2017 https://www.youtube.com/watch?v=v_RuP218y4k",
            "ScalaConf 2019 (in Russian) https://www.youtube.com/watch?v=kw8PuCz3csI"
          ],
          "contributes": [
            "Currently I",
            "contribute to Yupana (https://github.com/rusexpertiza-llc/yupana) which is",
            "a main topic of my talk (unfortunately at the moment readme is in Russian,",
            "but we are working on it). Also I have several own open-source projects",
            "like:",
            "",
            "BeanPuree https://github.com/limansky/beanpuree",
            "MongoQuery https://github.com/limansky/mongoquery",
            "sbt-git-flow-version https://github.com/limansky/sbt-git-flow-version",
            "and some other. Sometimes I do random contributions to different projects,",
            "like Lift, Akka, or even GitLab."
          ],
          "github": "",
          "twitter": "mike_limansky",
          "other_sns": "Facebook: https://www.facebook.com/mike.limansky"
        }
      ]
    }
  },
  {
    "id": "J7",
    "en": {
      "title": "Big Timesavers for Busy Scala Developers",
      "detail": "Introduces plugins and bots, maybe not well-known, useful for daily Scala development.\nBe more productive Scala developer together !!\n\n* Finish deprecated APIs rewrites in a flash\n* Don't repeat easy-to-miss coding errors and fix them\n* Get relief from watching releases of tons of libraries",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Tools",
        " Best Practices",
        " Scalaビギナー（Scala歴1年くらいまで）"
      ],
      "keywords": [
        "productivity hacks",
        "code quality",
        "workflow"
      ],
      "speakers": [
        {
          "name": "TATSUNO Yasuhiro",
          "icon": "https://pbs.twimg.com/profile_images/1065225327763320832/px0zvxM5_400x400.jpg",
          "organization": "Chatwork Co., Ltd.",
          "speaker_experience": [
            "ScalaMatsuri Unconference (2017)",
            "東京Node学園/Tokyo Node Festival (2018)",
            "https://speakerdeck.com/exoego/serverless-in-scala-on-node-dot-js",
            "名古屋フロントエンドユーザーグループ TypeScript勉強会 (2019)",
            "https://speakerdeck.com/exoego/easing-code-review-with-lint-for-typescript"
          ],
          "contributes": [
            "https://github.com/scala-js/scala-js",
            "https://github.com/serverless/serverless",
            "https://github.com/fomantic/Fomantic-UI"
          ],
          "github": "exoego",
          "twitter": "exoego",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "忙しいScala開発者の超時間節約術",
      "detail": "日々のScala開発で役立つのに意外と知られていないプラグインやボットを紹介します。\nみんなでより生産性の高いScala開発者になろう！\n\n・廃止APIの大規模な書き換えを一瞬で済ませる\n・見落としやすいコーディングエラーを再発させず、確実に直す\n・たくさんのライブラリのリリースを追い続ける日々から解放される",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Tools",
        " Best Practices",
        " Scalaビギナー（Scala歴1年くらいまで）"
      ],
      "keywords": [
        "productivity hacks",
        "code quality",
        "workflow"
      ],
      "speakers": [
        {
          "name": "立野靖博",
          "icon": "https://pbs.twimg.com/profile_images/1065225327763320832/px0zvxM5_400x400.jpg",
          "organization": "Chatwork株式会社",
          "speaker_experience": [
            "ScalaMatsuri Unconference (2017)",
            "東京Node学園/Tokyo Node Festival (2018)",
            "https://speakerdeck.com/exoego/serverless-in-scala-on-node-dot-js",
            "名古屋フロントエンドユーザーグループ TypeScript勉強会 (2019)",
            "https://speakerdeck.com/exoego/easing-code-review-with-lint-for-typescript"
          ],
          "contributes": [
            "https://github.com/scala-js/scala-js",
            "https://github.com/serverless/serverless",
            "https://github.com/fomantic/Fomantic-UI"
          ],
          "github": "exoego",
          "twitter": "exoego",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E29",
    "en": {
      "title": "First-Class Type-Level Programming",
      "detail": "Scala already supports type-level programming through implicits, but can we do better? In this talk we introduce \"match types\", i.e., type functions, arriving in Scala 3.0 and some of their use cases. We also explore how the language could evolve to support fully-fledged dependent types.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        "type-level programming",
        "match types",
        "dependent types"
      ],
      "speakers": [
        {
          "name": "Georg Schmid",
          "icon": "https://avatars2.githubusercontent.com/u/2364189?s=460&v=4",
          "organization": "EPFL",
          "speaker_experience": [],
          "contributes": [
            "Dotty, Stainless, V8"
          ],
          "github": "gsps",
          "twitter": "",
          "other_sns": ""
        },
        {
          "proposalId": "E29",
          "name": "Olivier Blanvillain",
          "icon": "https://people.epfl.ch/private/common/photos/links/184098.jpg",
          "organization": "EPFL",
          "speaker_experience": [
            "Scala Days Berlin 2018"
          ],
          "contributes": [
            "Dotty, Frameless, Monadic-html"
          ],
          "github": "olivierblanvillain",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "第1級の型レベルプログラミング",
      "detail": "Scalaはすでにimplicitを通じて型レベルプログラミングをサポートしていますが、よりうまくやる方法はないでしょうか？\n\nこのトークでは、Scala 3に導入された \"match types\" や、型レベルの関数について解説しつつ、そのユースケースについても紹介します。そして本格的な依存型のサポートへ向けて、さらにどのように進化できるのかについて探ります。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        "type-level programming",
        "match types",
        "dependent types"
      ],
      "speakers": [
        {
          "name": "Georg Schmid",
          "icon": "https://avatars2.githubusercontent.com/u/2364189?s=460&v=4",
          "organization": "EPFL",
          "speaker_experience": [],
          "contributes": [
            "Dotty, Stainless, V8"
          ],
          "github": "gsps",
          "twitter": "",
          "other_sns": ""
        },
        {
          "proposalId": "E29",
          "name": "Olivier Blanvillain",
          "icon": "https://people.epfl.ch/private/common/photos/links/184098.jpg",
          "organization": "EPFL",
          "speaker_experience": [
            "Scala Days Berlin 2018"
          ],
          "contributes": [
            "Dotty, Frameless, Monadic-html"
          ],
          "github": "olivierblanvillain",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E30",
    "en": {
      "title": "Modern JVM Multithreading",
      "detail": "In this presentation I will show what might be taken into consideration when writing a modern JVM application using Scala language. What are the differences between green threads and fibers? What kind of thread pools and how many of them should be used? Can we have a non-blocking communication with relational databases? Can we decouple our domain logic from asynchrony? Is it possible to have a reasonable stack-trace in asynchronous code? These are the main questions I'd like to address in the presentation.",
      "language": "English",
      "length": 100,
      "tags": [
        "Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Multithreading",
        "Concurrency",
        "Reactive"
      ],
      "speakers": [
        {
          "name": "Paweł Jurczenko",
          "icon": "https://avatars.githubusercontent.com/u/12970160",
          "organization": "Software Engineer at Allegro.pl",
          "speaker_experience": [
            "1. Allegro Tech Meeting 2019: https://youtu.be/Wjg3UxYmw3I",
            "2. Poznań Java User Group: https://youtu.be/uBIKmB0NyGE",
            "3. Allegro Tech Talks #19: https://www.facebook.com/allegro.tech/videos/446254389281330"
          ],
          "contributes": [],
          "github": "pjurczenko",
          "twitter": "pawel_jurczenko",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "モダンなJVMマルチスレッド",
      "detail": "このプレゼンテーションではScalaによるモダンなJVMアプリケーションを書くときに考慮する事柄について紹介します。グリーンスレッドとファイバーの違いはなんでしょうか。スレッドプールとは何か、またスレッドプール数はいくつにすべきでしょうか。リレーショナルデータベースとのノンブロッキングな通信は可能でしょうか。ドメインロジックを非同期から切り離すことが可能でしょうか。これらの問い対してこのプレゼンテーションでお伝えします。",
      "language": "English",
      "length": 100,
      "tags": [
        "Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Multithreading",
        "Concurrency",
        "Reactive"
      ],
      "speakers": [
        {
          "name": "Paweł Jurczenko",
          "icon": "https://avatars.githubusercontent.com/u/12970160",
          "organization": "Software Engineer at Allegro.pl",
          "speaker_experience": [
            "1. Allegro Tech Meeting 2019: https://youtu.be/Wjg3UxYmw3I",
            "2. Poznań Java User Group: https://youtu.be/uBIKmB0NyGE",
            "3. Allegro Tech Talks #19: https://www.facebook.com/allegro.tech/videos/446254389281330"
          ],
          "contributes": [],
          "github": "pjurczenko",
          "twitter": "pawel_jurczenko",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E31",
    "en": {
      "title": "Back to the Future",
      "detail": "We will go back to the beginnings of logic programming, discussing Prolog & his younger cousin (LogiQL). Monolithic programming model will also be brushed-up on & we will see its modern usage in Big Data (LogicBlox). We will then show how to combine predicates with Scala to generate applications.",
      "language": "English",
      "length": 40,
      "tags": [
        "Big Data / Fast Data",
        " Software Design and Architecture",
        " Others"
      ],
      "keywords": [
        "Logic Programming",
        "Code Generators",
        "Big Data"
      ],
      "speakers": [
        {
          "name": "Michal Kowalczykiewicz",
          "icon": "https://www.gravatar.com/avatar/47b4d7510e0f7738eb5c1612386b47d1",
          "organization": "Infor (Poland) / University of Wroclaw",
          "speaker_experience": [
            "Scalar 2018, ScalaUA 2019, InfoMEET 2019... More info with links please find on my webpage: http://www.ii.uni.wroc.pl/~kowalczykiewicz",
            ""
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": "https://www.linkedin.com/in/mkowalczykiewicz"
        }
      ]
    },
    "ja": {
      "title": "バック・トゥ・ザ・フューチャー",
      "detail": "論理プログラミングの始まりに戻ります。Prologと彼の新しいファミリーLogiQLについてお話しましょうモノリシックプログラミングモデルもブラッシュアップされ、ビッグデータ（LogicBlox）においては現代的な使用法も見られます。次に、述語をScalaと組み合わせてアプリケーションを作成する方法を示します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Big Data / Fast Data",
        " Software Design and Architecture",
        " Others"
      ],
      "keywords": [
        "Logic Programming",
        "Code Generators",
        "Big Data"
      ],
      "speakers": [
        {
          "name": "Michal Kowalczykiewicz",
          "icon": "https://www.gravatar.com/avatar/47b4d7510e0f7738eb5c1612386b47d1",
          "organization": "Infor (Poland) / University of Wroclaw",
          "speaker_experience": [
            "Scalar 2018, ScalaUA 2019, InfoMEET 2019... More info with links please find on my webpage: http://www.ii.uni.wroc.pl/~kowalczykiewicz",
            ""
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": "https://www.linkedin.com/in/mkowalczykiewicz"
        }
      ]
    }
  },
  {
    "id": "J8",
    "en": {
      "title": "Scala for Everything: From Frontend to Backend Applications",
      "detail": "Scala is a powerful language; You can build frontend applications with Scala.js, and efficient backend application servers for JVM. In this session, we will learn how to build everything with Scala by using Airframe OSS framework. ",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Tools",
        " Scalaビギナー（Scala歴1年くらいまで）",
        " Microservices"
      ],
      "keywords": [
        "Airframe Scala.js "
      ],
      "speakers": [
        {
          "name": "Taro L. Saito",
          "icon": "https://pbs.twimg.com/profile_images/652040869705461760/eIm1fxaM_400x400.jpg",
          "organization": "Arm Treasure Data",
          "speaker_experience": [
            "- Scala Matsuri",
            "- Conferenceなど"
          ],
          "contributes": [
            "Airframe, sbt-sonatype, MessagePackなど"
          ],
          "github": "xerial",
          "twitter": "taroleo",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scala無双: フロントエンドもバックエンドも全てScalaでなぎ倒せ",
      "detail": "Scalaは強力な言語で、Scala.jsによるWebブラウザ用のフロントエンドから、JVMで動くサーバーなど高性能なバックエンドプログラミングも可能です。このセッションでは、OSSであるAirframeフレームワークを用いて、アプリケーションを「全て」Scalaで作りきる手法を紹介します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Tools",
        " Scalaビギナー（Scala歴1年くらいまで）",
        " Microservices"
      ],
      "keywords": [
        "Airframe Scala.js "
      ],
      "speakers": [
        {
          "name": "Taro L. Saito",
          "icon": "https://pbs.twimg.com/profile_images/652040869705461760/eIm1fxaM_400x400.jpg",
          "organization": "Arm Treasure Data",
          "speaker_experience": [
            "- Scala Matsuri",
            "- Conferenceなど"
          ],
          "contributes": [
            "Airframe, sbt-sonatype, MessagePackなど"
          ],
          "github": "xerial",
          "twitter": "taroleo",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E32",
    "en": {
      "title": "Testing upside down",
      "detail": "You heard about testing of software. You have also written tests before. And you, most likely, have your own preferred style of writing tests. However, have you ever thought that your tests might not be exactly what you believe they are? In this talk, we will look at testing from different angle.",
      "language": "English",
      "length": 40,
      "tags": [
        "Best Practices",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        "testing",
        "software design"
      ],
      "speakers": [
        {
          "name": "Jiri Jakes",
          "icon": "https://avatars3.githubusercontent.com/u/1381856",
          "organization": "",
          "speaker_experience": [
            "• Multiple talks at Scala Taiwan Meetups (https://github.com/ScalaTaiwan/ScalaTaiwan/ marked by \"Jiří Jakeš\")",
            "• Talk at JCConf (Java conference in Taipei; no recording)",
            "• Unconference talk at Scala Matsuri 2019 ( https://www.youtube.com/watch?v=KG1XvPH-8rw )"
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "テストをひっくり返す",
      "detail": "ソフトウェアのテストというのはご存知でしょう。テストを書いたこともあると思います。おそらく、テストを書くのに好みのスタイルがあると思います。しかし、それらのテストの正体はあなたが信じているものではないかもしれないと考えたことはあるでしょうか？\n\nこのトークでは、テストを別の角度から眺めてみます。",
      "language": "English",
      "length": 40,
      "tags": [
        "Best Practices",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        "testing",
        "software design"
      ],
      "speakers": [
        {
          "name": "Jiri Jakes",
          "icon": "https://avatars3.githubusercontent.com/u/1381856",
          "organization": "",
          "speaker_experience": [
            "• Multiple talks at Scala Taiwan Meetups (https://github.com/ScalaTaiwan/ScalaTaiwan/ marked by \"Jiří Jakeš\")",
            "• Talk at JCConf (Java conference in Taipei; no recording)",
            "• Unconference talk at Scala Matsuri 2019 ( https://www.youtube.com/watch?v=KG1XvPH-8rw )"
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E33",
    "en": {
      "title": "The Phenomenon ZIO: Story of a new ecosystem",
      "detail": "ZIO is a Scala library for “type-safe, composable asynchronous and concurrent programming”. It seems that ZIO, and many related projects built on top of it, appeared out of blue sky, almost overnight. Let us have a look at origin and growth of this emerging Scala ecosystem.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Tools"
      ],
      "keywords": [
        "community",
        "ZIO"
      ],
      "speakers": [
        {
          "name": "Jiri Jakes",
          "icon": "https://avatars3.githubusercontent.com/u/1381856",
          "organization": "",
          "speaker_experience": [
            "• Multiple talks at Scala Taiwan Meetups  ( https://github.com/ScalaTaiwan/ScalaTaiwan/ marked by \"Jiří Jakeš\")",
            "• Talk at JCConf (Java conference in Taipei; no recording)",
            "• Unconference talk at Scala Matsuri 2019 ( https://www.youtube.com/watch?v=KG1XvPH-8rw )"
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "ZIOという現象：新しいエコシステムの物語",
      "detail": "ZIOは「型安全で合成可能な非同期および並行プログラミング」のためのScalaライブラリです。 ZIOとZIOで作られた多くの関連プロジェクトは、青天の霹靂のように突如現れたように見えます。この新しいScalaエコシステムの起源と成長を一緒に見てみましょう。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Tools"
      ],
      "keywords": [
        "community",
        "ZIO"
      ],
      "speakers": [
        {
          "name": "Jiri Jakes",
          "icon": "https://avatars3.githubusercontent.com/u/1381856",
          "organization": "",
          "speaker_experience": [
            "• Multiple talks at Scala Taiwan Meetups  ( https://github.com/ScalaTaiwan/ScalaTaiwan/ marked by \"Jiří Jakeš\")",
            "• Talk at JCConf (Java conference in Taipei; no recording)",
            "• Unconference talk at Scala Matsuri 2019 ( https://www.youtube.com/watch?v=KG1XvPH-8rw )"
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J9",
    "en": {
      "title": "Metals: write Scala with your favorite text editor",
      "detail": "According to the state of the developer ecosystem 2019, 89% of Scala developers use IntelliJ IDEA for their daily coding.\nThanks to the rise of Metals, an LSP implementation for Scala, it is a good option to write Scala in our favorite text editors such as Vim, Emacs, and VSCode.\n\nIn this talk, I present some brilliant features and architecture of Metals with some demos.",
      "language": "English",
      "length": 40,
      "tags": [
        "Tools",
        " Scalaビギナー（Scala歴1年くらいまで）"
      ],
      "keywords": [
        "developer tool",
        "IDE",
        "metals"
      ],
      "speakers": [
        {
          "name": "Rikito Taniguchi",
          "icon": "https://avatars0.githubusercontent.com/u/9353584?s=400&u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4",
          "organization": "株式会社はてな",
          "speaker_experience": [
            "ScalaMatsuri 2019 https://speakerdeck.com/tanishiking/how-we-replaced-a-10-year-old-perl-product-using-scala"
          ],
          "contributes": [
            "scalameta/scalafmt",
            "scalameta/metals"
          ],
          "github": "tanishiking",
          "twitter": "tanishiking25",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Metals: 好きなエディタで Scala を書くということ",
      "detail": "2019年のJetbrains社の調査によると89%のScalaエンジニアは開発にIntelliJ IDEAを使っているそうです。\n最近、ScalaのLSP実装であるMetalsの大きな進展によりvimやEmacsやVSCodeなど自分の好きなエディタからScalaを利用することが有力な選択肢となってきています。\nこの発表ではMetalsの主要な機能やアーキテクチャについてデモを交えてご紹介します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Tools",
        " Scalaビギナー（Scala歴1年くらいまで）"
      ],
      "keywords": [
        "developer tool",
        "IDE",
        "metals"
      ],
      "speakers": [
        {
          "name": "谷口力斗 tanishiking",
          "icon": "https://avatars0.githubusercontent.com/u/9353584?s=400&u=c3e5aba60a43901e7d2b7c0ea4caac06cde77049&v=4",
          "organization": "株式会社はてな",
          "speaker_experience": [
            "ScalaMatsuri 2019 https://speakerdeck.com/tanishiking/how-we-replaced-a-10-year-old-perl-product-using-scala"
          ],
          "contributes": [
            "scalameta/scalafmt",
            "scalameta/metals"
          ],
          "github": "tanishiking",
          "twitter": "tanishiking25",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E34",
    "en": {
      "title": "A Guided Tour of The Amazing Akka Cluster",
      "detail": "Akka is a powerful toolkit implemented in Scala for concurrent and distributed computing. The Akka Cluster feature of Akka allows many compute nodes to be joined together in a group that acts as a single massive supercomputer. This talk uses visual simulations and live demos, with code examples in Scala, to provide a detailed tour of the workings of Akka Cluster and the amazing features it enables. The talk also describes several compelling use cases built with Akka Cluster. The attendee will come away with a deep and intuitive appreciation for the elegance and power of Akka Cluster.    ",
      "language": "English",
      "length": 40,
      "tags": [
        "Tools",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Akka",
        "distributed computing",
        "visualization "
      ],
      "speakers": [
        {
          "name": "Douglas McPherson",
          "icon": "/img/speakers/E34.jpg",
          "organization": "Lightbend Inc.",
          "speaker_experience": [
            "Reactive Summit 2017 (https://www.youtube.com/watch?v=TcG_sUNfWK8)"
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "素晴らしいAkka Clusterの紹介ツアー",
      "detail": "Akkaは、Scala で実装された並行・分散コンピューティングのために強力なツールキットです。AkkaのAkka Cluster機能により、多くの計算ノードをグループ化し、単一の巨大なスーパーコンピュターとして振る舞うことを可能にします。\n\nこのトークでは、視覚シミュレーションとライブデモを使用し、Scalaのコード例を使用して、Akka Clusterの動作とそれが可能にする驚くべき機能を詳しくご紹介します。また、Akka Clusterで構築されたいくつかの魅力的なユースケースについても説明します。出席者は、Akka Clusterのエレガンスとパワーを深く直感的に理解するでしょう。",
      "language": "English",
      "length": 40,
      "tags": [
        "Tools",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Akka",
        "distributed computing",
        "visualization "
      ],
      "speakers": [
        {
          "name": "Douglas McPherson",
          "icon": "/img/speakers/E34.jpg",
          "organization": "Lightbend Inc.",
          "speaker_experience": [
            "Reactive Summit 2017 (https://www.youtube.com/watch?v=TcG_sUNfWK8)"
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J10",
    "en": {
      "title": "Re-architecting in GANMA!",
      "detail": "GANMA! is an original manga distribution service that implemented by Scala.\n7 years have passed since starting a project and have a lot of technical debt.\nIn this session, we will talk struggle to re-architecture.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "DevOps",
        " Software Design and Architecture",
        " Microservices"
      ],
      "keywords": [
        "DDD",
        "Rearchitecture",
        "Kubernetes"
      ],
      "speakers": [
        {
          "name": "Naoki Aoyama - @aoiroaoino",
          "icon": "https://avatars0.githubusercontent.com/u/2589034?s=460&v=4",
          "organization": "株式会社セプテーニ・オリジナル",
          "speaker_experience": [
            "おもな登壇:",
            "",
            "ScalaMatsuri (2018),  Scala関西Summit (2016, 2017, 2019), Scala秋祭り, など",
            "",
            "おもな資料:",
            "",
            "Lens の基本と基礎 (ScalaMatsuri 2017 アンカンファレンス)",
            "https://www.slideshare.net/AoiroAoino/van-laarhoven-lens-72584231 ",
            "",
            "Purely Functional Play Framework Application (ScalaMatsuri 2018)",
            "https://www.slideshare.net/AoiroAoino/purelyfunctionalplayframeworkapplication",
            "",
            "Scala における継続モナドの実装と活用 (Scala秋祭り)",
            "https://speakerdeck.com/aoiroaoino/scala-niokeruji-sok-monadofalseshi-zhuang-tohuo-yong"
          ],
          "contributes": [
            "https://github.com/aoiroaoino/guttural"
          ],
          "github": "aoiroaoino",
          "twitter": "AoiroAoino",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Re-architecting in GANMA!",
      "detail": "GANMA! は2013年にサービスを開始したマンガ配信サービスで、バックエンドはほぼ全て Scala で実装されています。リリースから7年目を迎え、いよいよ本腰を入れて技術的負債と向き合う時がやってきました。このセッションでは現在抱えている課題とそれをどう解消しようと取り組んでいるのかをご紹介します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "DevOps",
        " Software Design and Architecture",
        " Microservices"
      ],
      "keywords": [
        "DDD",
        "Rearchitecture",
        "Kubernetes"
      ],
      "speakers": [
        {
          "name": "Naoki Aoyama - @aoiroaoino",
          "icon": "https://avatars0.githubusercontent.com/u/2589034?s=460&v=4",
          "organization": "株式会社セプテーニ・オリジナル",
          "speaker_experience": [
            "おもな登壇:",
            "",
            "ScalaMatsuri (2018),  Scala関西Summit (2016, 2017, 2019), Scala秋祭り, など",
            "",
            "おもな資料:",
            "",
            "Lens の基本と基礎 (ScalaMatsuri 2017 アンカンファレンス)",
            "https://www.slideshare.net/AoiroAoino/van-laarhoven-lens-72584231 ",
            "",
            "Purely Functional Play Framework Application (ScalaMatsuri 2018)",
            "https://www.slideshare.net/AoiroAoino/purelyfunctionalplayframeworkapplication",
            "",
            "Scala における継続モナドの実装と活用 (Scala秋祭り)",
            "https://speakerdeck.com/aoiroaoino/scala-niokeruji-sok-monadofalseshi-zhuang-tohuo-yong"
          ],
          "contributes": [
            "https://github.com/aoiroaoino/guttural"
          ],
          "github": "aoiroaoino",
          "twitter": "AoiroAoino",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E35",
    "en": {
      "title": "Forward Error Correction with Scala Cats and Akka Streams ",
      "detail": "Forward Error Correction (FEC) techniques have been studied since the 1950s and are ubiquitous in today's communication and storage systems. An introductory survey of the algebraic theory of linear FEC codes using examples written in Scala Cats is presented. A illustrative working simulation of a linear feedback shift register in Akka Streams is demonstrated, which in turn is used to implement a Reed-Solomon FEC code using the Cats toolkit. The talk will be of interest to people with a curiosity about how FEC works, an interest in Cats, or a desire to see a cool Akka Streams simulation.    ",
      "language": "English",
      "length": 100,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        "cats",
        "akka streams",
        "forward error correction"
      ],
      "speakers": [
        {
          "name": "Douglas McPherson",
          "icon": "/img/speakers/E34.jpg",
          "organization": "Lightbend Inc",
          "speaker_experience": [
            "Reactive Summit 2017 (https://www.youtube.com/watch?v=TcG_sUNfWK8)"
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scala CatsとAkka Streamsによる前方誤り訂正",
      "detail": "前方誤り訂正（FEC）技術は1950年代から研究されており、今日の通信およびストレージシステムで広く使用されています。Scala Catsで書かれた例を用いて線形FEC符号の代数理論の入門的調査を紹介します。Akka Streamsによる線形帰還シフトレジスタの実例シミュレーションを示します。Catsツールキットをリード・ソロモンFEC符号を実装するために使用します。このトークは、FECがどのように機能するか、Cats及びクールなAkka Streamsシミュレーションを見たい人にとって興味深い内容となります。",
      "language": "English",
      "length": 100,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        "cats",
        "akka streams",
        "forward error correction"
      ],
      "speakers": [
        {
          "name": "Douglas McPherson",
          "icon": "/img/speakers/E34.jpg",
          "organization": "Lightbend Inc",
          "speaker_experience": [
            "Reactive Summit 2017 (https://www.youtube.com/watch?v=TcG_sUNfWK8)"
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J11",
    "en": {
      "title": "Akka hands-on session - Actor, Event Sourcing, CQRS and Clustering",
      "detail": "Learn about Akka's Actor, Event Sourcing, CQRS and Clustering. After the session, you will be able to create your own applications with these features from scratch. The full source code will be available on GitHub. We start from a simple application, make a change step by step and explain the background of each change.",
      "language": "Japanese",
      "length": 100,
      "tags": [
        "Software Design and Architecture"
      ],
      "keywords": [
        "Akka",
        "CQRS",
        "Clustering"
      ],
      "speakers": [
        {
          "name": "Richard Imaoka",
          "icon": "https://s.gravatar.com/avatar/14bfbc98a7d5ed3574be08f6b176ce70?s=80",
          "organization": "マーベリック株式会社 技術広報",
          "speaker_experience": [
            "Scala 関西 Summit 2019 https://speakerdeck.com/richardimaokajp/javafei-tong-qi-chu-li",
            "builderscon 2018 https://builderscon.io/tokyo/2018/session/3b06e658-0386-4603-be45-798f77361b86",
            "Fun Fun Functional (2) 関数型言語Lightning Talks!! https://speakerdeck.com/richardimaokajp/scala-ziowobatutichu-li-nishi-tutemita"
          ],
          "contributes": [],
          "github": "richardimaoka",
          "twitter": "RichardImaokaJP",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Akka アクター、イベント・ソーシング、CQRS、クラスタリング・ハンズオン",
      "detail": "Akkaのアクター、イベント・ソーシング、CQRS、クラスタリングの機能を使ったハンズオンを行います。このセッションのゴールは参加者が自分でこれらの機能をもつAkkaアプリケーションをスクラッチから開発できることです。本番環境投入前のプロトタイプ作成などに役立つでしょう。サンプルのソースコードは完全な物をGitHub上で公開し、後から参加者が自分で触れるようにします。最初はごくシンプルなアプリケーションから、すこしずつ機能を追加し設計を変化させ、各段階で「どんな課題があるのか？」「新しい機能・設計を導入する理由は何なのか？」を説明します。",
      "language": "Japanese",
      "length": 100,
      "tags": [
        "Software Design and Architecture"
      ],
      "keywords": [
        "Akka",
        "CQRS",
        "Clustering"
      ],
      "speakers": [
        {
          "name": "リチャード 伊真岡",
          "icon": "https://s.gravatar.com/avatar/14bfbc98a7d5ed3574be08f6b176ce70?s=80",
          "organization": "マーベリック株式会社 技術広報",
          "speaker_experience": [
            "Scala 関西 Summit 2019 https://speakerdeck.com/richardimaokajp/javafei-tong-qi-chu-li",
            "builderscon 2018 https://builderscon.io/tokyo/2018/session/3b06e658-0386-4603-be45-798f77361b86",
            "Fun Fun Functional (2) 関数型言語Lightning Talks!! https://speakerdeck.com/richardimaokajp/scala-ziowobatutichu-li-nishi-tutemita"
          ],
          "contributes": [],
          "github": "richardimaoka",
          "twitter": "RichardImaokaJP",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J12",
    "en": {
      "title": "A interpreter handling over effects for Eff",
      "detail": "We consider that we use DBIO(in Slick) and Either as DBIO[Either[E, A]], it cannot allow us to implement that “if the result would be Either.Left then turn it into DBIO.failed and rollback!” without changing any interfaces because monads(or monad transformers) and its processes are coupled tightly. On the other hands in Extensible Effects(Eff) we add types as effects to the effect stack and interpreters process the types. Since effects and interpreters are separated so we can implement an interpreter which process two effects at one shot. I'll talk about that topic in this session.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "Extensible Effects,Effect system,Effect abstraction"
      ],
      "speakers": [
        {
          "name": "YOSHIMURA Hikaru",
          "icon": "https://pbs.twimg.com/profile_images/1198179592520921088/w0T_BnoX_400x400.jpg",
          "organization": "株式会社リクルートマーケティングパートナーズ エンジニア",
          "speaker_experience": [
            "try!Swift2019（protocol/extensionにジェネリクスを入れたい）",
            "・https://www.youtube.com/watch?v=Urt1VJShbL4&list=PLCl5NM4qD3u_L8dJrWYbLB8FcUaoAHDFt&index=33&t=0s",
            "・https://github.com/y-yu/try-swift-slide",
            "",
            "ScalaMatsuri2019（Fujitask meets Extensible Effects, アンカンファレンス）",
            "・https://github.com/y-yu/fujitask-eff-slide/"
          ],
          "contributes": [
            "Scala text",
            "・https://github.com/scala-text 主にPDF版のメンテ",
            "",
            "The Rust Programming Language 2nd Edition（日本語訳）",
            "・https://github.com/rust-lang-ja/book-ja-pdf PDF版のメンテ",
            "",
            "Erlang in enger（日本語訳）",
            "・https://github.com/ymotongpoo/erlang-in-anger 日本語翻訳版のPDFメンテ"
          ],
          "github": "y-yu",
          "twitter": "_yyu_",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "エフェクトを跨ぐインタープリター",
      "detail": "SlickのDBIOとEitherを組み合せたDBIO[Either[E, A]]のような型があるとき、モナドやモナドトランスフォーマーはエフェクトを表すDBIOのような型とそれの処理が密に結合しているため「Either.LeftのときはDBIO.failedにしロールバックして！」といったエフェクトに跨がる処理をインターフェースの変更をせずに書くことができない。Extensible Effects（Eff）はエフェクトスタックにエフェクトを表す型を追加し、インタープリターがそれを処理する。エフェクトの型と処理（インタープリター）は分離されているため、DBIOとEitherのようにエフェクトを跨ぐようなインタープリターを書くことができる。このセッションではこのテーマについてモナドやモナドトランスフォーマーの議論も交えながら解説する。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "Extensible Effects,Effect system,Effect abstraction"
      ],
      "speakers": [
        {
          "name": "吉村 優",
          "icon": "https://pbs.twimg.com/profile_images/1198179592520921088/w0T_BnoX_400x400.jpg",
          "organization": "株式会社リクルートマーケティングパートナーズ エンジニア",
          "speaker_experience": [
            "try!Swift2019（protocol/extensionにジェネリクスを入れたい）",
            "・https://www.youtube.com/watch?v=Urt1VJShbL4&list=PLCl5NM4qD3u_L8dJrWYbLB8FcUaoAHDFt&index=33&t=0s",
            "・https://github.com/y-yu/try-swift-slide",
            "",
            "ScalaMatsuri2019（Fujitask meets Extensible Effects, アンカンファレンス）",
            "・https://github.com/y-yu/fujitask-eff-slide/"
          ],
          "contributes": [
            "Scala text",
            "・https://github.com/scala-text 主にPDF版のメンテ",
            "",
            "The Rust Programming Language 2nd Edition（日本語訳）",
            "・https://github.com/rust-lang-ja/book-ja-pdf PDF版のメンテ",
            "",
            "Erlang in enger（日本語訳）",
            "・https://github.com/ymotongpoo/erlang-in-anger 日本語翻訳版のPDFメンテ"
          ],
          "github": "y-yu",
          "twitter": "_yyu_",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J13",
    "en": {
      "title": "A design of robust API using Eff and Clean Architecture in Scala",
      "detail": "We may deal with breaking changes on API that affect only own team through communication efforts. But it's impossible at least for public API because we must consider backward compatibility etc. I'll introduce a robust API design using Eff and Clean Architecture to accompany fast-growing products.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Clean Architecture / Eff / API Design"
      ],
      "speakers": [
        {
          "name": "Yuichi Maekawa",
          "icon": "/img/speakers/J13.jpg",
          "organization": "アルプ株式会社",
          "speaker_experience": [
            "DroidKaigi 2018, ScalaMatsuri 2019など"
          ],
          "contributes": [],
          "github": "kaelaela",
          "twitter": "_kaelaela",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Clean ArchitectureとEffで変更に強いAPIを設計する",
      "detail": "APIのデザイン変更は、影響範囲がチーム内に閉じていれば共有&相談で破壊的な変更にも柔軟に対応できます。\nしかし、外部に公開するAPIはそう簡単ではありません。\n一度公開したモデルは簡単に変更できず、互換性の担保などの制約が生まれます。\nプロダクトの急速な成長に対応しやすくするためにScalaとEff、Clean Architectureを使った変更に強いAPIデザインについて紹介します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Clean Architecture / Eff / API Design"
      ],
      "speakers": [
        {
          "name": "前川 裕一",
          "icon": "/img/speakers/J13.jpg",
          "organization": "アルプ株式会社",
          "speaker_experience": [
            "DroidKaigi 2018, ScalaMatsuri 2019など"
          ],
          "contributes": [],
          "github": "kaelaela",
          "twitter": "_kaelaela",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J14",
    "en": {
      "title": "Expressing complex domain regions and boundaries with 'modular monoliths'",
      "detail": "The architecture must change constantly, considering three requirements: organizational growth, domain and performance.\nHowever, to implement microservices at startup, it can be difficult to meet all the requirements.\nWe will explain how to realize context boundaries and reduce the pain of service division using \"modular monolith\" in Scala.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "modular monoliths",
        "clean architecture"
      ],
      "speakers": [
        {
          "name": "Shoma Takeo - @showmant",
          "icon": "https://avatars2.githubusercontent.com/u/5019215?s=460&v=4",
          "organization": "アルプ株式会社 取締役",
          "speaker_experience": [
            "Scala秋祭り"
          ],
          "contributes": [],
          "github": "showmant",
          "twitter": "showmant_",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "モジュラモノリスで表現する複雑なドメイン領域と境界",
      "detail": "アーキテクチャは組織成長、ドメイン、パフォーマンスの3つの要件を考慮して常に変化する必要があります。\nしかしながら、スタートアップでマイクロサービスを導入するために、3つの要件全てを満たすには時間の制約や経験値から判断が困難なこともあります。\nこのセッションでは「モジュラモノリス」を採用するに至った経緯、Scalaでのコンテキスト境界の実現方法、サービス分断の痛みを軽減する工夫などを解説していきます。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "modular monoliths",
        "clean architecture"
      ],
      "speakers": [
        {
          "name": "竹尾 正馬 - @showmant",
          "icon": "https://avatars2.githubusercontent.com/u/5019215?s=460&v=4",
          "organization": "アルプ株式会社 取締役",
          "speaker_experience": [
            "Scala秋祭り"
          ],
          "contributes": [],
          "github": "showmant",
          "twitter": "showmant_",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J15",
    "en": {
      "title": "How to deal with the ever-changing interface",
      "detail": "The API interface provided by the rapidly growing products changes very quickly, and there is always the issue of \"how to detect and follow changes\" in the development of cooperating subsystems.\nIn this session, we will talk about the difficulty of following the ever-changing interface and how we responded.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Software Design and Architecture",
        " Microservices",
        " Others"
      ],
      "keywords": [
        "API,Interface,ProtocolBuffer"
      ],
      "speakers": [
        {
          "name": "@omiend",
          "icon": "https://s.gravatar.com/avatar/93f52b85c90d3fc6afdfa7c61ce2a89e?s=80",
          "organization": "アルプ株式会社",
          "speaker_experience": [],
          "contributes": [
            "ScalaMatsuri"
          ],
          "github": "omiend",
          "twitter": "omiend",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "如何にして刻々と変わるインターフェイスに対応すればよいのか",
      "detail": "急成長するプロダクトが提供するAPIのインターフェイスは非常に変化が早く、連携するサブシステムの開発において常に\"どのようにして変更を検知し、追従していくのか\"という課題がつきまといます。 このセッションでは、日々刻々と変わるインターフェイスへ追従することの難しさと、如何にして対応したのかをお話します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Software Design and Architecture",
        " Microservices",
        " Others"
      ],
      "keywords": [
        "API,Interface,ProtocolBuffer"
      ],
      "speakers": [
        {
          "name": "@omiend",
          "icon": "https://s.gravatar.com/avatar/93f52b85c90d3fc6afdfa7c61ce2a89e?s=80",
          "organization": "アルプ株式会社",
          "speaker_experience": [],
          "contributes": [
            "ScalaMatsuri"
          ],
          "github": "omiend",
          "twitter": "omiend",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J16",
    "en": {
      "title": "Serverless Framework for Scala",
      "detail": "As the name suggests, Serverless Framework is a framework for facilitating configuration management and deployment of serverless applications.\nIn this session, introduce how to implement Lambda functions in Scala, deploy applications, cooperate with other services, monitoring, etc. with actual examples assuming the AWS environment.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Tools"
      ],
      "keywords": [
        "Serverless Framework",
        "AWS Lambda"
      ],
      "speakers": [
        {
          "name": "Takumi Kadowaki - @nomadblacky",
          "icon": "https://pbs.twimg.com/profile_images/1110501048559390720/UmgRho9s_400x400.jpg",
          "organization": "株式会社 セプテーニ・オリジナル エンジニア",
          "speaker_experience": [
            "Scala秋祭り 『面倒なことはScalaスクリプトにやらせよう』 https://speakerdeck.com/nomadblacky/let-scala-scripts-do-the-troublesome-things",
            "Scala関西Summit 2018 『Readable Code in Scala』 https://gitpitch.com/NomadBlacky/slides/readable-code-in-scala#/"
          ],
          "contributes": [
            "https://github.com/serverless/serverless",
            "https://github.com/NomadBlacky/scaladog",
            "https://github.com/NomadBlacky/digdag-plugin-datadog"
          ],
          "github": "NomadBlacky",
          "twitter": "nomadblacky",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Serverless Framework for Scala",
      "detail": "Serverless Frameworkはその名の通り、サーバレスアプリケーションの構成管理やデプロイを容易にするためののためのフレームワークです。\nこのセッションではAWSの環境を前提に、LambdaファンクションをScalaで実装する方法、アプリケーションのデプロイ、他のサービスとの連携、監視などを実例を交えて紹介します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Tools"
      ],
      "keywords": [
        "Serverless Framework",
        "AWS Lambda"
      ],
      "speakers": [
        {
          "name": "門脇 拓巳 - @nomadblacky",
          "icon": "https://pbs.twimg.com/profile_images/1110501048559390720/UmgRho9s_400x400.jpg",
          "organization": "株式会社 セプテーニ・オリジナル エンジニア",
          "speaker_experience": [
            "Scala秋祭り 『面倒なことはScalaスクリプトにやらせよう』 https://speakerdeck.com/nomadblacky/let-scala-scripts-do-the-troublesome-things",
            "Scala関西Summit 2018 『Readable Code in Scala』 https://gitpitch.com/NomadBlacky/slides/readable-code-in-scala#/"
          ],
          "contributes": [
            "https://github.com/serverless/serverless",
            "https://github.com/NomadBlacky/scaladog",
            "https://github.com/NomadBlacky/digdag-plugin-datadog"
          ],
          "github": "NomadBlacky",
          "twitter": "nomadblacky",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E36",
    "en": {
      "title": "Friendly Functional Programming",
      "detail": "Functional programming is one of the possible paradigm that we can use to write applications using Scala, \nIn this talk you will learn about: \n* The benefits of using Functional programming approach\n* The type classes in Scala\n* And the common functional abstractions: semigroup, monoid, functor, applicative, and monad",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "Functional programming",
        "Scala",
        "Abstraction "
      ],
      "speakers": [
        {
          "name": "Wiem Zine Elabidine",
          "icon": "/img/speakers/E36.png",
          "organization": "Software Enginner / MOIA",
          "speaker_experience": [
            "Scalar conference: https://www.youtube.com/watch?v=d6WWmia0BPM&list=PL8NC5lCgGs6MYG0hR_ZOhQLvtoyThURka",
            "Scala Days: https://www.youtube.com/watch?v=hh9SYl-IfIc",
            "Bee Scala: https://www.youtube.com/watch?v=v2JsK1M--3k",
            ""
          ],
          "contributes": [
            "https://github.com/zio/zio"
          ],
          "github": "wi101",
          "twitter": "WiemZin",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "フレンドリーな関数型プログラミング",
      "detail": "関数型プログラミングは、Scalaを使ってアプリケーションを書くときに採用可能なパラダイムの一つです。\n\nこのトークでは、以下のことを学ぶことができます。\n- 関数型プログラミング的な手法の利点\n- Scalaにおける型クラス\n- よくある関数型の抽象化: semigroup, monoid, functor, applicative, そして monad",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Scala Beginners (~1year)"
      ],
      "keywords": [
        "Functional programming",
        "Scala",
        "Abstraction "
      ],
      "speakers": [
        {
          "name": "Wiem Zine Elabidine",
          "icon": "/img/speakers/E36.png",
          "organization": "Software Enginner / MOIA",
          "speaker_experience": [
            "Scalar conference: https://www.youtube.com/watch?v=d6WWmia0BPM&list=PL8NC5lCgGs6MYG0hR_ZOhQLvtoyThURka",
            "Scala Days: https://www.youtube.com/watch?v=hh9SYl-IfIc",
            "Bee Scala: https://www.youtube.com/watch?v=v2JsK1M--3k",
            ""
          ],
          "contributes": [
            "https://github.com/zio/zio"
          ],
          "github": "wi101",
          "twitter": "WiemZin",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E38",
    "en": {
      "title": "Errors, diagnostics and interruptions with ZIO",
      "detail": "Error management, error tracing, interruption - complex topics of a concurrent application. We will describe the status quo from the standpoint of Scala's Future. Next, we will contrast it with ZIO's take: lossless errors, fiber dumps, execution traces, auto-supervision, programmable interruption.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices"
      ],
      "keywords": [
        "zio",
        "fiber diagnostics",
        "interruption"
      ],
      "speakers": [
        {
          "name": "Kamil Kloch",
          "icon": "https://avatars1.githubusercontent.com/u/807154?s=460&v=4",
          "organization": "Software Engineer, Superfund Technologies",
          "speaker_experience": [
            "No tech conference yet, a couple of academia talks in the past: http://kamilkloch.github.io/"
          ],
          "contributes": [
            "Minor contributions to zio and cats-mtl."
          ],
          "github": "kamilkloch",
          "twitter": "@kamil_k",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "\nZIO におけるエラー処理、トレーシング、および割り込み処理",
      "detail": "エラー処理、エラーのトレーシング、割り込み処理は並行アプリケーションにおける複雑なトピックです。まず Scala 標準の Future による現状を説明します。続いて、これらに対する ZIO の取り組みを解説します。ロスレスなエラー、fiber dump、実行トレース、自動 supervision、プログラム可能な割り込みなどを紹介します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices"
      ],
      "keywords": [
        "zio",
        "fiber diagnostics",
        "interruption"
      ],
      "speakers": [
        {
          "name": "Kamil Kloch",
          "icon": "https://avatars1.githubusercontent.com/u/807154?s=460&v=4",
          "organization": "Software Engineer, Superfund Technologies",
          "speaker_experience": [
            "No tech conference yet, a couple of academia talks in the past: http://kamilkloch.github.io/"
          ],
          "contributes": [
            "Minor contributions to zio and cats-mtl."
          ],
          "github": "kamilkloch",
          "twitter": "@kamil_k",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J17",
    "en": {
      "title": "Yet Another Free Monad Guide for Scala Beginners",
      "detail": "Here in Japan, Free monad is still only used by expert functional professionals. \nThis session will provide you general information about what it is and when to use.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Scalaビギナー（Scala歴1年くらいまで）"
      ],
      "keywords": [
        "Begginners",
        "Free Monad"
      ],
      "speakers": [
        {
          "name": "Kazz (@kazzna)",
          "icon": "https://pbs.twimg.com/profile_images/577473638389055488/d0DD8ZJM.png",
          "organization": "",
          "speaker_experience": [],
          "contributes": [],
          "github": "",
          "twitter": "kazzna",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "今から学ぶFree Monad",
      "detail": "ScalazにFree Monadが導入された2011年以降、幾多のガチ勢による解説が行われてきました。\nしかし、日本の現場ではまだまだ一般的に使われているとは言えない状況です。\nこのセッションでは正確さよりも概要を優先して、Freeの便利さや使いどころを説明します。\n対象は`for 〜 yield`構文が書ける程度を想定しています。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Scalaビギナー（Scala歴1年くらいまで）"
      ],
      "keywords": [
        "Begginners",
        "Free Monad"
      ],
      "speakers": [
        {
          "name": "かず (@kazzna)",
          "icon": "https://pbs.twimg.com/profile_images/577473638389055488/d0DD8ZJM.png",
          "organization": "",
          "speaker_experience": [],
          "contributes": [],
          "github": "",
          "twitter": "kazzna",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J18",
    "en": {
      "title": "Entity Versioning Pattern with Event Sourcing",
      "detail": "An entity's change history may have business logic.\nHow much entity versioning is possible, including state and side effects?\nDomain Events and Event Sourcing can provide versioning for complex entities.\nI will introduce the design pattern for entity versioning.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "DDD",
        "Domain Event",
        "Event Sourcing"
      ],
      "speakers": [
        {
          "name": "Pictiny",
          "icon": "https://pbs.twimg.com/profile_images/1206924697796956162/cYvExC_4_400x400.jpg",
          "organization": "アルプ株式会社",
          "speaker_experience": [
            "builderscon 2019, ScalaMatsuri 2019 アンカンファレンスなど",
            "https://speakerdeck.com/pictiny/shi-wozheng-sikuxi-utamefalsesisutemushe-ji"
          ],
          "contributes": [],
          "github": "pictiny",
          "twitter": "pictiny",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "イベントソーシングによるエンティティのバージョン管理設計",
      "detail": "エンティティの変更履歴はビジネスロジックを持つことがあります。\nエンティティの状態や副作用を含めたバージョン管理はどの程度可能でしょうか？\n時間軸を持った複雑なドメインオブジェクトのエンティティに対し、ドメインイベントをイベントソーシングすることでバージョン管理を実現できます。このようなバージョン管理の設計パターンを、Scalaの実装を例に紹介します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "DDD",
        "Domain Event",
        "Event Sourcing"
      ],
      "speakers": [
        {
          "name": "集約のエンティティ",
          "icon": "https://pbs.twimg.com/profile_images/1206924697796956162/cYvExC_4_400x400.jpg",
          "organization": "アルプ株式会社",
          "speaker_experience": [
            "builderscon 2019, ScalaMatsuri 2019 アンカンファレンスなど",
            "https://speakerdeck.com/pictiny/shi-wozheng-sikuxi-utamefalsesisutemushe-ji"
          ],
          "contributes": [],
          "github": "pictiny",
          "twitter": "pictiny",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J19",
    "en": {
      "title": "Onboarding process of the Scala team",
      "detail": "Scala is unique in its flexibility and expressiveness. On the other hand, such aspects sometimes make it hard for newcomer to catch up with the coding style of team.\nIn this session, I will share our Scala team's \"Onboarding\" process and tools to make teamwork work.\n\nI'll also talk about topics that might be useful to newcomers, such as how to apply Scala's language features to production code and learning resources.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Tools",
        " Scalaビギナー（Scala歴1年くらいまで）",
        " Others"
      ],
      "keywords": [
        "knowledge sharing",
        "employee experience"
      ],
      "speakers": [
        {
          "name": "Shunsuke Tadokoro",
          "icon": "https://avatars2.githubusercontent.com/u/2328540?s=460&v=4",
          "organization": "株式会社ビズリーチ",
          "speaker_experience": [
            "ScalaMatsuri 2019 「Running Scala on AWS Lambda in a Snappy Way」 ( https://speakerdeck.com/todokr/running-scala-on-aws-lambda-in-a-snappy-way )",
            "JJUG CCC 2017 Fall 「新しいプログラミング言語の学び方 HTTPサーバーを作って学ぶJava, Scala, Clojure」( https://speakerdeck.com/todokr/xin-siihurokuraminkuyan-yu-falsexue-hifang-httpsahawozuo-tutexue-hu-java-scala-clojure )"
          ],
          "contributes": [],
          "github": "todokr",
          "twitter": "todokr",
          "other_sns": ""
        },
        {
          "name": "Robert Devlin",
          "icon": "https://avatars2.githubusercontent.com/u/49631740?s=460&u=4fbd12e0778c01518833ec7ee52775144ef152fa&v=4",
          "organization": "株式会社ビズリーチ",
          "speaker_experience": [],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scalaチームのオンボーディング",
      "detail": "Scalaの特色として挙げられるのが、柔軟性や抽象度の高いコードを記述できる表現力です。一方、それゆえにチームのコーディングスタイルへの新メンバーのキャッチアップが難しくなってしまうこともしばしばあります。\nこのセッションでは、新メンバーの入社前から業務の開始、活躍に至るまでの「オンボーディング」の取り組みや、活用しているツールを共有します。\n\n主なテーマは「Scala未経験の新メンバーをチームはどのようにサポートするか」ですが、Scalaの言語機能をどのように活かすかや、学習リソースの紹介など、入門者の方に役立つかもしれないトピックについてもお話ししたいと思います。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Tools",
        " Scalaビギナー（Scala歴1年くらいまで）",
        " Others"
      ],
      "keywords": [
        "knowledge sharing",
        "employee experience"
      ],
      "speakers": [
        {
          "name": "田所 駿佑",
          "icon": "https://avatars2.githubusercontent.com/u/2328540?s=460&v=4",
          "organization": "株式会社ビズリーチ",
          "speaker_experience": [
            "ScalaMatsuri 2019 「Running Scala on AWS Lambda in a Snappy Way」 ( https://speakerdeck.com/todokr/running-scala-on-aws-lambda-in-a-snappy-way )",
            "JJUG CCC 2017 Fall 「新しいプログラミング言語の学び方 HTTPサーバーを作って学ぶJava, Scala, Clojure」( https://speakerdeck.com/todokr/xin-siihurokuraminkuyan-yu-falsexue-hifang-httpsahawozuo-tutexue-hu-java-scala-clojure )"
          ],
          "contributes": [],
          "github": "todokr",
          "twitter": "todokr",
          "other_sns": ""
        },
        {
          "name": "Robert Devlin",
          "icon": "https://avatars2.githubusercontent.com/u/49631740?s=460&u=4fbd12e0778c01518833ec7ee52775144ef152fa&v=4",
          "organization": "株式会社ビズリーチ",
          "speaker_experience": [],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J20",
    "en": {
      "title": "liberty, equality, and boxed primitive types",
      "detail": "In this talk, I will explore the equality in Scala. == is seemingly easy, but it's actually a complicated topic.\n\nThe Scala Language Spec doesn't explain much about equality. We'll try to revisit some of the past discussions and think how == actually behave.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Others"
      ],
      "keywords": [
        "scala",
        "equality",
        "language design"
      ],
      "speakers": [
        {
          "name": "Eugene Yokota (eed3si9n)",
          "icon": "https://secure.gravatar.com/avatar/8f41595db400be30176f6f04630c2842",
          "organization": "Twitter",
          "speaker_experience": [
            "Scala Days",
            "Scala Sphere",
            "nescala"
          ],
          "contributes": [
            "sbt",
            "Zinc",
            "Scala"
          ],
          "github": "eed3si9n",
          "twitter": "eed3si9n_ja",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "自由、平等、ボックス化されたプリミティブ型",
      "detail": "Scala における等価性に関して考察します。== は一見簡単そうに見えて実は複雑なトピックです。\n\nScala の言語仕様は等価性に関してあまり詳しく書いてありません。過去の議論などをさかのぼって == がどう振る舞うのかを考えてみましょう。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Others"
      ],
      "keywords": [
        "scala",
        "equality",
        "language design"
      ],
      "speakers": [
        {
          "name": "Eugene Yokota (eed3si9n)",
          "icon": "https://secure.gravatar.com/avatar/8f41595db400be30176f6f04630c2842",
          "organization": "Twitter",
          "speaker_experience": [
            "Scala Days",
            "Scala Sphere",
            "nescala"
          ],
          "contributes": [
            "sbt",
            "Zinc",
            "Scala"
          ],
          "github": "eed3si9n",
          "twitter": "eed3si9n_ja",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J21",
    "en": {
      "title": "sbt status report",
      "detail": "Updates around sbt and Zinc.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Tools"
      ],
      "keywords": [
        "sbt",
        "tooling",
        "Zinc"
      ],
      "speakers": [
        {
          "name": "Eugene Yokota (eed3si9n)",
          "icon": "https://secure.gravatar.com/avatar/8f41595db400be30176f6f04630c2842",
          "organization": "Lightbend",
          "speaker_experience": [
            "Scala Days",
            "Scala Sphere",
            "nescala"
          ],
          "contributes": [
            "sbt",
            "Zinc",
            "Scala"
          ],
          "github": "eed3si9n",
          "twitter": "eed3si9n_ja",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "sbt 近況",
      "detail": "sbt とか Zinc で最近考えてることなど。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Tools"
      ],
      "keywords": [
        "sbt",
        "tooling",
        "Zinc"
      ],
      "speakers": [
        {
          "name": "Eugene Yokota (eed3si9n)",
          "icon": "https://secure.gravatar.com/avatar/8f41595db400be30176f6f04630c2842",
          "organization": "Lightbend",
          "speaker_experience": [
            "Scala Days",
            "Scala Sphere",
            "nescala"
          ],
          "contributes": [
            "sbt",
            "Zinc",
            "Scala"
          ],
          "github": "eed3si9n",
          "twitter": "eed3si9n_ja",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E39",
    "en": {
      "title": "Graphs with functional programming with free monads",
      "detail": "Algebraic data types represent tree-structured data very easily but graph-structured data can be more difficult due to “backward” edges. This talk describes one way to model graph-structured data in pure functional programming using ADTs and a structure very similar to the Free Monad.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "Data structures",
        "Graphs",
        "Free monads"
      ],
      "speakers": [
        {
          "name": "Thomas Sutton",
          "icon": "https://media-exp1.licdn.com/dms/image/C5103AQHSJl23XHq9ZA/profile-displayphoto-shrink_200_200/0?e=1586390400&v=beta&t=3NRIM9xCLqCrhsVph05-8cvy6GkDmwrl73KwzhN_Spo",
          "organization": "Simple Machines",
          "speaker_experience": [
            "Conferences: I presented a lightning talk at ScalaMatsuri 2019 https://m.youtube.com/watch?v=gs7MNm6YMX4 and at YOW! LambdaJam in Brisbane 2015",
            "Meetups: I’ve presented at FP-Syd, Drupal WA, and other meetups several times.",
            "",
            "Slides for some presentations can be found here: https://speakerdeck.com/thsutton"
          ],
          "contributes": [
            "aeson-diff - a Haskell implementation of JSON Patch"
          ],
          "github": "thsutton",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "関数型プログラミングとFreeモナドによるグラフ",
      "detail": "代数的データ型はとても簡単に木構造データを表せますが、「逆向き」の辺を持つグラフ構造データで表すことは難しいです。\n\nこのトークでは、純粋関数型プログラミングにおいて抽象データ型（ADT）を用いてグラフ構造のデータをモデル化するための手法の一つを解説します。それは Freeモナドとよく似た構造となっています。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "Data structures",
        "Graphs",
        "Free monads"
      ],
      "speakers": [
        {
          "name": "Thomas Sutton",
          "icon": "https://media-exp1.licdn.com/dms/image/C5103AQHSJl23XHq9ZA/profile-displayphoto-shrink_200_200/0?e=1586390400&v=beta&t=3NRIM9xCLqCrhsVph05-8cvy6GkDmwrl73KwzhN_Spo",
          "organization": "Simple Machines",
          "speaker_experience": [
            "Conferences: I presented a lightning talk at ScalaMatsuri 2019 https://m.youtube.com/watch?v=gs7MNm6YMX4 and at YOW! LambdaJam in Brisbane 2015",
            "Meetups: I’ve presented at FP-Syd, Drupal WA, and other meetups several times.",
            "",
            "Slides for some presentations can be found here: https://speakerdeck.com/thsutton"
          ],
          "contributes": [
            "aeson-diff - a Haskell implementation of JSON Patch"
          ],
          "github": "thsutton",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E40",
    "en": {
      "title": "Probabilistic Programming in Scala",
      "detail": "Probabilistic programming is one of the easiest ways to do real statistical inference on real datasets. In this talk I will show you what you can do with PP, how to do that directly from Scala by interfacing with existing PP languages and how to implement your own ultra-simplified PP DSL in Scala.",
      "language": "English",
      "length": 100,
      "tags": [
        "Functional Programming",
        " Tools",
        " Data Science / Machine Learning"
      ],
      "keywords": [
        "Probabilistic Programming",
        "Applied Statistical Inference",
        "Machine Learning"
      ],
      "speakers": [
        {
          "name": "Alexander Konovalov",
          "icon": "/img/speakers/E40.jpg",
          "organization": "Compellon / Software Developer",
          "speaker_experience": [
            "ScalaMatsuri 2019, LambdaConf 2019, LambdaConf 2018, https://github.com/cohomolo-gy/Isomorphic-Reasoning/blob/master/main.pdf https://slides.com/alexanderkonovalov-1/recursion-1/ https://www.youtube.com/watch?v=q_xPKaAcWtI&feature=emb_logo"
          ],
          "contributes": [],
          "github": "alexknvl",
          "twitter": "alexknvl",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scala での確率的プログラミング",
      "detail": "確率的プログラミングは、現実のデータセットに対し、現実的な統計的な推論を行う最も簡単な手法の一つです。このトークでは、確率論プログラミングで何が出来るかをお見せしたり、直接Scalaから既存の確率論プログラミング言語に触れたり、超シンプルな確率論プログラミングDSLをScalaで実装する方法をお見せします。",
      "language": "English",
      "length": 100,
      "tags": [
        "Functional Programming",
        " Tools",
        " Data Science / Machine Learning"
      ],
      "keywords": [
        "Probabilistic Programming",
        "Applied Statistical Inference",
        "Machine Learning"
      ],
      "speakers": [
        {
          "name": "Alexander Konovalov",
          "icon": "/img/speakers/E40.jpg",
          "organization": "Compellon / Software Developer",
          "speaker_experience": [
            "ScalaMatsuri 2019, LambdaConf 2019, LambdaConf 2018, https://github.com/cohomolo-gy/Isomorphic-Reasoning/blob/master/main.pdf https://slides.com/alexanderkonovalov-1/recursion-1/ https://www.youtube.com/watch?v=q_xPKaAcWtI&feature=emb_logo"
          ],
          "contributes": [],
          "github": "alexknvl",
          "twitter": "alexknvl",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E41",
    "en": {
      "title": "Bespoke Error Handling and Reporting",
      "detail": "Let's be honest, most error reporting is just awful. \"Some Error has occurred\" is often as good as it gets. How do we do better? I will show you how using ZIO for impure code, and having an explicit error channel in your pure code allows you to get bespoke error reporting. Real life examples from $JOB.",
      "language": "English",
      "length": 40,
      "tags": [
        "Best Practices",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Error Handling & Reporting",
        "ZIO",
        "Best practices"
      ],
      "speakers": [
        {
          "name": "Alexander Konovalov",
          "icon": "/img/speakers/E40.jpg",
          "organization": "Compellon / Software Developer",
          "speaker_experience": [
            "ScalaMatsuri 2019, LambdaConf 2019, LambdaConf 2018, https://twitter.com/alexknvl/status/1148978882281955328, https://www.youtube.com/watch?v=q_xPKaAcWtI&feature=emb_logo"
          ],
          "contributes": [],
          "github": "alexknvl",
          "twitter": "alexknvl",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "エラー処理とエラー報告のオーダーメイド",
      "detail": "正直なところ、全くもってエラーの報告は酷いものだ。「何かエラーが起きたよ。」ならまだ良い方だ。良くするにはどうしたら良いか?ZIOを汚いコードで使う方法と、あなたの綺麗なコードでエラーチャンネルでのエラー報告のあつらえ方をご覧いただこう。実際の生々しい例を$JOBからお見せしよう。",
      "language": "English",
      "length": 40,
      "tags": [
        "Best Practices",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Error Handling & Reporting",
        "ZIO",
        "Best practices"
      ],
      "speakers": [
        {
          "name": "Alexander Konovalov",
          "icon": "/img/speakers/E40.jpg",
          "organization": "Compellon / Software Developer",
          "speaker_experience": [
            "ScalaMatsuri 2019, LambdaConf 2019, LambdaConf 2018, https://twitter.com/alexknvl/status/1148978882281955328, https://www.youtube.com/watch?v=q_xPKaAcWtI&feature=emb_logo"
          ],
          "contributes": [],
          "github": "alexknvl",
          "twitter": "alexknvl",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J22",
    "en": {
      "title": "An introduction to multi-stage programming with Dotty",
      "detail": "Multi-stage programming (MSP) is a kind of meta-programming that enables type-safe runtime code generation and abstraction without regrets.\nDotty (Scala 3) has enhanced the meta-programming mechanism to allow MSP.\nIn this session, we will talk about the concept of MSP and how to write its program, and an approach combining MSP and tagless-final.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "Generative Programming",
        "Abstraction without Regret",
        "tagless-final"
      ],
      "speakers": [
        {
          "name": "Kenichi Suzuki",
          "icon": "https://avatars2.githubusercontent.com/u/16099864?s=460&v=4",
          "organization": "",
          "speaker_experience": [
            "Scala秋祭り (https://speakerdeck.com/dcubeio/from-tagless-final-to-typed-final-program-transformations-in-the-final-style)"
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Dotty ではじめるマルチステージプログラミング入門",
      "detail": "マルチステージプログラミング (MSP) は、型安全な実行時コード生成と、オーバーヘッドのない抽象化を可能とするメタプログラミングの一種です。\nDotty (Scala 3) ではメタプログラミング機構が強化され、MSP が可能になりました。\nこのセッションでは、 MSP の概念やその基本的なプログラムの書き方、 さらに tagless-final と組み合わせた実用的で高性能なDSL構築アプローチについてお話します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "Generative Programming",
        "Abstraction without Regret",
        "tagless-final"
      ],
      "speakers": [
        {
          "name": "鈴木 健一",
          "icon": "https://avatars2.githubusercontent.com/u/16099864?s=460&v=4",
          "organization": "",
          "speaker_experience": [
            "Scala秋祭り (https://speakerdeck.com/dcubeio/from-tagless-final-to-typed-final-program-transformations-in-the-final-style)"
          ],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J23",
    "en": {
      "title": "Gradual Typing for Scala",
      "detail": "What is Gradual Typing? Does Scala satisfy Gradual Typing's theorem? In addition, we will explain how to satisfy Gradual Typing in Scala.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        ""
      ],
      "speakers": [
        {
          "name": "Yu Miura",
          "icon": "/img/speakers/J23.jpg",
          "organization": "株式会社サイバーエージェント",
          "speaker_experience": [],
          "contributes": [
            "Breeze"
          ],
          "github": "YuMuuu",
          "twitter": "curelemonade2",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scalaのための漸進的型付け",
      "detail": "Gradual Typingとはなにか．ScalaはGradual Typingの定理を満たしているのか．またScalaでGradual Typingを満たすにはどうすれば良いかを解説します",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        ""
      ],
      "speakers": [
        {
          "name": "三浦勇",
          "icon": "/img/speakers/J23.jpg",
          "organization": "株式会社サイバーエージェント",
          "speaker_experience": [],
          "contributes": [
            "Breeze"
          ],
          "github": "YuMuuu",
          "twitter": "curelemonade2",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E42",
    "en": {
      "title": "Thinking about Mutability with Affine Types in Scala",
      "detail": "While Scala 2/3 does not support affine types (or other substructural types), they are still useful conceptually to think about limited-scope mutability. Is passing StringBuilder around a pure FP heresy, or is there a justification and an intuition for it through substructural type systems?",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "Substructural Type Systems",
        "Affine Types"
      ],
      "speakers": [
        {
          "name": "Alexander Konovalov",
          "icon": "/img/speakers/E40.jpg",
          "organization": "Compellon / Software Developer",
          "speaker_experience": [
            "ScalaMatsuri 2019, LambdaConf 2019, LambdaConf 2018, https://twitter.com/alexknvl/status/1148978882281955328, https://www.youtube.com/watch?v=q_xPKaAcWtI&feature=emb_logo"
          ],
          "contributes": [],
          "github": "alexknvl",
          "twitter": "alexknvl",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scalaにおける可変性とアフィン型について考える",
      "detail": "Scala 2や3ではアフィン型 (や、そのほかの部分構造型) をサポートしていませんが、限定されたスコープの可変性について考える上で、それらは概念的に有用なものです。\n\nStringBuilder を渡して回るのは純粋関数型プログラミングでは禁じ手なのでしょうか? 部分構造型システムを通じて考えることでこれを正当化することができるかもしれません。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming"
      ],
      "keywords": [
        "Substructural Type Systems",
        "Affine Types"
      ],
      "speakers": [
        {
          "name": "Alexander Konovalov",
          "icon": "/img/speakers/E40.jpg",
          "organization": "Compellon / Software Developer",
          "speaker_experience": [
            "ScalaMatsuri 2019, LambdaConf 2019, LambdaConf 2018, https://twitter.com/alexknvl/status/1148978882281955328, https://www.youtube.com/watch?v=q_xPKaAcWtI&feature=emb_logo"
          ],
          "contributes": [],
          "github": "alexknvl",
          "twitter": "alexknvl",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J24",
    "en": {
      "title": "Akka Streams vs Spark Structured  Streaming",
      "detail": "Akka Streams and Spark Structured Streaming are way to implement streaming for big data.\nSo, which is better?\nHow about the power of expression, reliable, responsive, elastic, resilient.\nI'll explain the overview and compare these worrisome parts and introduce techniques for clearing the issues.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Big Data / Fast Data",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Akka Streams",
        "Spark",
        "Structured  Streaming"
      ],
      "speakers": [
        {
          "name": "Kosuke Yabumoto",
          "icon": "/img/speakers/J24.png",
          "organization": "株式会社ジオロジック CTO",
          "speaker_experience": [
            "#6 市ヶ谷Geek★Night「アドテク百花繚乱」",
            "https://ichigayageek.connpass.com/event/27420/"
          ],
          "contributes": [],
          "github": "glyabumoto",
          "twitter": "@yabooun",
          "other_sns": "Facebook: https://www.facebook.com/kousuke.yabumoto.9"
        }
      ]
    },
    "ja": {
      "title": "Akka Streams vs Spark Structured  Streaming",
      "detail": "大量データへのストリーミング処理の実装方法として、Akka StreamsとSpark Structured Streamingがあります。\n\nでは、実案件ではどちらを採用すべきでしょうか。\n仕様の表現力、信頼性、即応性、弾力性、耐障害性などはどうでしょうか。\n\nこの２つについて概要および簡単な使い方を説明し、気になる部分を比較して、課題をクリアするテクニックを紹介します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Big Data / Fast Data",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Akka Streams",
        "Spark",
        "Structured  Streaming"
      ],
      "speakers": [
        {
          "name": "藪本晃輔",
          "icon": "/img/speakers/J24.png",
          "organization": "株式会社ジオロジック CTO",
          "speaker_experience": [
            "#6 市ヶ谷Geek★Night「アドテク百花繚乱」",
            "https://ichigayageek.connpass.com/event/27420/"
          ],
          "contributes": [],
          "github": "glyabumoto",
          "twitter": "@yabooun",
          "other_sns": "Facebook: https://www.facebook.com/kousuke.yabumoto.9"
        }
      ]
    }
  },
  {
    "id": "J25",
    "en": {
      "title": "Looking at category theory thorough Scala",
      "detail": "We meet category theory learning functional programming.\nMany words from category theory like Functor, Monad, etc appear in functional libraries.\nThis session introduce the basics of category theory and the representations of these concepts in Scala.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        "Category Theory",
        "Monad"
      ],
      "speakers": [
        {
          "name": "Taniguchi Keiichiro",
          "icon": "/img/speakers/J25.jpg",
          "organization": "Fringe 81株式会社 エンジニア",
          "speaker_experience": [
            "Scala関西Summit 2019",
            "https://speakerdeck.com/tanitk/scaladequan-lun-tiyotutoxue-bu"
          ],
          "contributes": [],
          "github": "taniTk",
          "twitter": "@ravineport",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scalaで圏論の世界をのぞいてみる",
      "detail": "関数型プログラミングを学んでいると出会う圏論の世界。\n関数型ライブラリを見ていてもFunctorやMonadなどなど圏論由来の言葉が多くでてきます。\n本セッションでは、圏論の基礎を学ぶとともに様々な概念がScalaでどういった表現になるのかを紹介します。\nScala関西 2019の発表と内容がかぶる部分があります。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Others"
      ],
      "keywords": [
        "Category Theory",
        "Monad"
      ],
      "speakers": [
        {
          "name": "谷口 慶一郎",
          "icon": "/img/speakers/J25.jpg",
          "organization": "Fringe 81株式会社 エンジニア",
          "speaker_experience": [
            "Scala関西Summit 2019",
            "https://speakerdeck.com/tanitk/scaladequan-lun-tiyotutoxue-bu"
          ],
          "contributes": [],
          "github": "taniTk",
          "twitter": "@ravineport",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J26",
    "en": {
      "title": "Making of SaaS backend, guided by PofEAA",
      "detail": "On SaaS development scenes, mature design skill is required to make code refrect complex business models.In that situation, Martin Fowler's \"Patterns of Enterprise Application Architecture\" is still a powerful source of idea even after the times.In this session, I will explain Implementation of SaaS backend API using patterns from PofEAA.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Best Practices",
        " Scalaビギナー（Scala歴1年くらいまで）",
        " Software Design and Architecture"
      ],
      "keywords": [
        "OOP",
        "RDB",
        "PofEAA"
      ],
      "speakers": [
        {
          "name": "Kenichi Tanga",
          "icon": "/img/speakers/J26.jpg",
          "organization": "アルプ株式会社 エンジニア",
          "speaker_experience": [
            "PHPカンファレンス福岡2018",
            "PHPカンファレンス仙台2019"
          ],
          "contributes": [],
          "github": "dnskimo",
          "twitter": "dnskimox",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "PofEAAで考えるSaaSバックエンドの作り方",
      "detail": "SaaSの開発現場では複雑なビジネスモデルをコードに落とし込むため、地に足のついた設計技能が不可欠です。そんな時、Martin Fowler氏の著した『Patterns of Enterprise Application Architecture』は、時代を経た今でも十分有力な情報源になります。このセッションではPofEAAのパターンを用いてSaaSのバックエンドAPIを実装する方法を解説します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Best Practices",
        " Scalaビギナー（Scala歴1年くらいまで）",
        " Software Design and Architecture"
      ],
      "keywords": [
        "OOP",
        "RDB",
        "PofEAA"
      ],
      "speakers": [
        {
          "name": "丹賀 健一",
          "icon": "/img/speakers/J26.jpg",
          "organization": "アルプ株式会社 エンジニア",
          "speaker_experience": [
            "PHPカンファレンス福岡2018",
            "PHPカンファレンス仙台2019"
          ],
          "contributes": [],
          "github": "dnskimo",
          "twitter": "dnskimox",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E43",
    "en": {
      "title": "Operating your infrastructure with Scala based Hubots",
      "detail": "A standard microservice architecture includes components like microservice, Kafka, Cassandra, Elasticsearch, etc and these components could be behind a proxy. In this session, we will see how one can provide the first aid to these components securely in case anything goes down with Scala based Hubot",
      "language": "English",
      "length": 40,
      "tags": [
        "Tools",
        " DevOps",
        " Software Design and Architecture",
        " Others"
      ],
      "keywords": [
        "Hubot",
        "Scala",
        "DevOps"
      ],
      "speakers": [
        {
          "name": "Sahil Sawhney",
          "icon": "https://pbs.twimg.com/profile_images/1091401167706488832/ZKQS9pXS_400x400.jpg",
          "organization": "Lead Consultant, Knoldus Software",
          "speaker_experience": [
            "Scala Matsuri 2019 -> https://www.youtube.com/watch?v=-31YjUKQcq4",
            "Tech triveni 2018 -> https://www.youtube.com/watch?v=_mVmxosuK1c",
            "Meetups and Other community sessions."
          ],
          "contributes": [],
          "github": "",
          "twitter": "lihas5",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scala製Hubots によるインフラ管理",
      "detail": "標準的なマイクロサービスアーキテクチャは、コンポーネントとしてのマイクロサービス、Kafka、Cassandra、Elasticsearch などを含みます。\nこれらのコンポーネントはプロキシの後ろにあるでしょう。\nこのセッションでは、Scala 製の Hubots を使って、これらのコンポーネントのなにかがダウンした際のセキュアな応急方法についてお話します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Tools",
        " DevOps",
        " Software Design and Architecture",
        " Others"
      ],
      "keywords": [
        "Hubot",
        "Scala",
        "DevOps"
      ],
      "speakers": [
        {
          "name": "Sahil Sawhney",
          "icon": "https://pbs.twimg.com/profile_images/1091401167706488832/ZKQS9pXS_400x400.jpg",
          "organization": "Lead Consultant, Knoldus Software",
          "speaker_experience": [
            "Scala Matsuri 2019 -> https://www.youtube.com/watch?v=-31YjUKQcq4",
            "Tech triveni 2018 -> https://www.youtube.com/watch?v=_mVmxosuK1c",
            "Meetups and Other community sessions."
          ],
          "contributes": [],
          "github": "",
          "twitter": "lihas5",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J27",
    "en": {
      "title": "Beginning Scala from zero for other language exparts: ~block exp, for exp, type classes",
      "detail": "Scala is sometimes said to be expensive to learn.\n\nThe existence of language mechanisms that are difficult to analogize from the experience of other languages,\nIn other languages, specially prepared functions are realized by a combination of simple functions,\nso, some people feel difficult to learn.\n\nIn this session, it ’s helpful to know first,\nI would like to explain the effective language mechanisms that are difficult to learn by analogy from other languages.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Best Practices",
        " Scalaビギナー（Scala歴1年くらいまで）",
        " Others"
      ],
      "keywords": [
        ""
      ],
      "speakers": [
        {
          "name": "NAKAMURA Manabu (gakuzzzz)",
          "icon": "https://pbs.twimg.com/profile_images/1431608839/ceb5e4f7-bec8-4a68-a86c-32d0c7ae4e22_400x400.png",
          "organization": "",
          "speaker_experience": [
            "Scala関西Summit2019 https://gakuzzzz.github.io/slides/lightweight_clean_architecture_with_dmt/",
            "ScalaMatsuri2019 https://gakuzzzz.github.io/slides/cps_or_di/",
            "BuriKaigi2020 https://gakuzzzz.github.io/slides/type_safe_builder_in_java/",
            ""
          ],
          "contributes": [],
          "github": "gakuzzzz",
          "twitter": "gakuzzzz",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "他言語経験者が0から始めるScala ～block式とfor式と型クラス～",
      "detail": "Scalaは時折、学習コストが高いと言われる事があります。\n元々持っている他言語の経験から類推しにくい言語機構の存在や、他言語では専用で用意されている機能が、シンプルな機能の組み合わせで実現されていたりする事から、取っ付きづらさを感じてしまう方もいらっしゃる様です。\n\nこのセッションでは、最初に知っておくと理解が進みやすかったり、実務で効果を発揮しやすかったりするものの、なかなか他言語からの類推では学習し難い言語機構について、簡単に解説したいと思います。\n",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Best Practices",
        " Scalaビギナー（Scala歴1年くらいまで）",
        " Others"
      ],
      "keywords": [
        ""
      ],
      "speakers": [
        {
          "name": "中村 学（がくぞ）",
          "icon": "https://pbs.twimg.com/profile_images/1431608839/ceb5e4f7-bec8-4a68-a86c-32d0c7ae4e22_400x400.png",
          "organization": "",
          "speaker_experience": [
            "Scala関西Summit2019 https://gakuzzzz.github.io/slides/lightweight_clean_architecture_with_dmt/",
            "ScalaMatsuri2019 https://gakuzzzz.github.io/slides/cps_or_di/",
            "BuriKaigi2020 https://gakuzzzz.github.io/slides/type_safe_builder_in_java/",
            ""
          ],
          "contributes": [],
          "github": "gakuzzzz",
          "twitter": "gakuzzzz",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "J28",
    "en": {
      "title": "The story of rewriting Android application written in Scala with Kotlin",
      "detail": "GANMA! is an original manga distribution service that implemented in Scala, and Android application was also Scala (of cause!). However, recent circumstances have led to a project to rewriting with Kotlin. In this session, we will introduce the knowledge gained from replacing Scala to Kotlin.",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Scalaビギナー（Scala歴1年くらいまで）",
        " Others"
      ],
      "keywords": [
        "Android",
        "Kotlin",
        "refactoring"
      ],
      "speakers": [
        {
          "name": "Yunoue Naoya",
          "icon": "https://avatars0.githubusercontent.com/u/11360473?s=400&u=980bfa0c895732d683c68f6529b195d9e2993864&v=4",
          "organization": "株式会社セプテーニ・オリジナル",
          "speaker_experience": [],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Scalaで書かれたAndroidアプリをKotlinで書き直した話",
      "detail": "GANMA!は2013年にサービスを開始した漫画配信サービスで、バックエンドはほぼ全てScalaで実装されおり、Androidアプリもほぼ全てScalaで実装されていました。しかしここ数年の情勢から既存のコードをKotlinで書き換えるプロジェクトが開始されました。このセッションではScalaで書かれたコードをKotlinに置き換える上で得られた知見を紹介します。",
      "language": "Japanese",
      "length": 40,
      "tags": [
        "Scalaビギナー（Scala歴1年くらいまで）",
        " Others"
      ],
      "keywords": [
        "Android",
        "Kotlin",
        "refactoring"
      ],
      "speakers": [
        {
          "name": "湯上 尚哉",
          "icon": "https://avatars0.githubusercontent.com/u/11360473?s=400&u=980bfa0c895732d683c68f6529b195d9e2993864&v=4",
          "organization": "株式会社セプテーニ・オリジナル",
          "speaker_experience": [],
          "contributes": [],
          "github": "",
          "twitter": "",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E44",
    "en": {
      "title": "Write yourself a CLI tool - no more bash",
      "detail": "Ever wished you had utilities for day-to-day tasks in the shell, but didn't want to write bash scripts?\nHaving problems learning the syntax of sed and awk? This talk is for you - learn how to structure a command line application in the language you know, which tools to use to build it, and how to make it run faster.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Tools",
        " Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "tools",
        "functional programming",
        "command line"
      ],
      "speakers": [
        {
          "name": "Jakub Kozłowski",
          "icon": "https://blog.kubukoz.com/assets/images/kubukoz.jpg",
          "organization": "",
          "speaker_experience": [
            "I spoke at Scala Italy, Scalar and flatMap(Oslo).",
            "",
            "Videos:",
            "",
            "https://vimeo.com/368027707",
            "",
            "https://www.youtube.com/watch?v=fZO2lV2xjEo",
            "",
            "https://www.youtube.com/watch?v=HMs_F7LXTak"
          ],
          "contributes": [
            "I help maintain fs2 and redis4cats, and I sometimes contribute to cats-effect."
          ],
          "github": "kubukoz",
          "twitter": "kubukoz",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "自作CLIツール: 脱bash",
      "detail": "シェル上での毎日の繰り返しタスクのためのユーティリティがほしいと思ったことがあるでしょう。でも bash スクリプトは書きたくないですよね。\nsed や awk のシンタックスを学習するのに苦労したことがありますよね。\nこのトークはそんなあなたのためのものです。あたがが知っている言語で CLI アプリの作り方を知りましょう。それをビルドするためのツール、さらに素早く走らせるためのノウハウを。\t",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Tools",
        " Best Practices",
        " Software Design and Architecture"
      ],
      "keywords": [
        "tools",
        "functional programming",
        "command line"
      ],
      "speakers": [
        {
          "name": "Jakub Kozłowski",
          "icon": "https://blog.kubukoz.com/assets/images/kubukoz.jpg",
          "organization": "",
          "speaker_experience": [
            "I spoke at Scala Italy, Scalar and flatMap(Oslo).",
            "",
            "Videos:",
            "",
            "https://vimeo.com/368027707",
            "",
            "https://www.youtube.com/watch?v=fZO2lV2xjEo",
            "",
            "https://www.youtube.com/watch?v=HMs_F7LXTak"
          ],
          "contributes": [
            "I help maintain fs2 and redis4cats, and I sometimes contribute to cats-effect."
          ],
          "github": "kubukoz",
          "twitter": "kubukoz",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E45",
    "en": {
      "title": "Domain Specific Languages in the real world for beginners",
      "detail": "One of the reasons Scala is praised for is the ability to write concise DSLs in it.\nHowever, that power is often underappreciated and most people don't write any.\nLearn what situations Domain Specific Languages can help you with, what makes a good one, and how they can be implemented.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        ""
      ],
      "speakers": [
        {
          "name": "Jakub Kozłowski",
          "icon": "https://blog.kubukoz.com/assets/images/kubukoz.jpg",
          "organization": "",
          "speaker_experience": [
            "I spoke at Scala Italy, Scalar and flatMap(Oslo).",
            "",
            "Videos:",
            "",
            "https://vimeo.com/368027707",
            "",
            "https://www.youtube.com/watch?v=fZO2lV2xjEo",
            "",
            "https://www.youtube.com/watch?v=HMs_F7LXTak"
          ],
          "contributes": [
            "I help maintain fs2 and redis4cats, and I sometimes contribute to cats-effect."
          ],
          "github": "kubukoz",
          "twitter": "kubukoz",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "初心者のための、実務でのドメイン特化言語",
      "detail": "Scalaが賞賛される理由の一つは、簡潔なドメイン特化言語(DSL)書けることです。\n\nしかしながら、ドメイン特化言語の力はしばしば正当に評価されず、ほとんどの人は書いたこともないでしょう。\n\nどういう場合にドメイン特化言語が役立つのか、どうすると良いものができるのか、そしてどのように実装できるのか、学んでいきましょう。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        ""
      ],
      "speakers": [
        {
          "name": "Jakub Kozłowski",
          "icon": "https://blog.kubukoz.com/assets/images/kubukoz.jpg",
          "organization": "",
          "speaker_experience": [
            "I spoke at Scala Italy, Scalar and flatMap(Oslo).",
            "",
            "Videos:",
            "",
            "https://vimeo.com/368027707",
            "",
            "https://www.youtube.com/watch?v=fZO2lV2xjEo",
            "",
            "https://www.youtube.com/watch?v=HMs_F7LXTak"
          ],
          "contributes": [
            "I help maintain fs2 and redis4cats, and I sometimes contribute to cats-effect."
          ],
          "github": "kubukoz",
          "twitter": "kubukoz",
          "other_sns": ""
        }
      ]
    }
  },
  {
    "id": "E46",
    "en": {
      "title": " Designing Recursive Data Types",
      "detail": "How to model your own recursive data type and how this affects it’s the way you write code to traverse or manipulate it. Comparing 3 approaches: good old Recursion, Visitor Pattern and Recursion schemes using animations to explain how they work.",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Recursion Schemes",
        "ADT"
      ],
      "speakers": [
        {
          "name": "Tamer Abdulradi",
          "icon": "https://pbs.twimg.com/profile_images/897100228947570688/6-b3f3gs_400x400.jpg",
          "organization": "Just Eat",
          "speaker_experience": [
            "Scala World https://www.youtube.com/watch?v=dbqRqhHpggs",
            "Scala Exchange (All vids are gone, but check twitter feedback like: https://twitter.com/ValentinKasas/status/1073199213956292609)",
            "Scala Days https://www.youtube.com/watch?v=OedtxbyexaY"
          ],
          "contributes": [
            "scala https://github.com/scala/scala/pulls?q=is%3Apr+is%3Aclosed+author%3Atabdulradi",
            "atto https://github.com/tpolecat/atto/pull/79",
            "nullable https://github.com/tabdulradi/nullable"
          ],
          "github": "tabdulradi",
          "twitter": "tabdulradi",
          "other_sns": "https://www.linkedin.com/in/tamerradi/"
        }
      ]
    },
    "ja": {
      "title": "再帰的データ型を設計する",
      "detail": "再帰的データ型の設計の仕方により、データの走査(traverse)や操作するコードの書き方に、どんな影響があるでしょうか。\n\n古き良き再帰、ビジターパターン、そして再帰スキームという3つのやり方を比較し、それぞれどのように働くかアニメーションで説明します。",
      "language": "English",
      "length": 40,
      "tags": [
        "Functional Programming",
        " Best Practices",
        " Scala Beginners (~1year)",
        " Software Design and Architecture"
      ],
      "keywords": [
        "Recursion Schemes",
        "ADT"
      ],
      "speakers": [
        {
          "name": "Tamer Abdulradi",
          "icon": "https://pbs.twimg.com/profile_images/897100228947570688/6-b3f3gs_400x400.jpg",
          "organization": "Just Eat",
          "speaker_experience": [
            "Scala World https://www.youtube.com/watch?v=dbqRqhHpggs",
            "Scala Exchange (All vids are gone, but check twitter feedback like: https://twitter.com/ValentinKasas/status/1073199213956292609)",
            "Scala Days https://www.youtube.com/watch?v=OedtxbyexaY"
          ],
          "contributes": [
            "scala https://github.com/scala/scala/pulls?q=is%3Apr+is%3Aclosed+author%3Atabdulradi",
            "atto https://github.com/tpolecat/atto/pull/79",
            "nullable https://github.com/tabdulradi/nullable"
          ],
          "github": "tabdulradi",
          "twitter": "tabdulradi",
          "other_sns": "https://www.linkedin.com/in/tamerradi/"
        }
      ]
    }
  }
]
